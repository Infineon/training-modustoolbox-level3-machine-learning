// This file is generated. Do not edit.
// Generated on: 08.09.2022 02:33:42

#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/compatibility.h"
#include "tensorflow/lite/micro/micro_context.h"
#if LOG_OP_INPUTS
#include "tensorflow/lite/micro/micro_invoke_log.h"
#endif

#if TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
#include "tensorflow/lite/micro/kernels/ifx_common/offline_prepare_utils.h" 
#endif  // TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA


#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#if TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/add_op_data.h"
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/conv_op_data.h"
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/depthwise_conv_op_data.h"
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/fully_connected_op_data.h"
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/mul_op_data.h"
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/pooling_op_data.h"
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/softmax_op_data.h"
#include "tensorflow/lite/micro/kernels/ifx_cmsis_nn/svdf_op_data.h"
#endif  // TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
namespace {


constexpr int kTensorArenaSize = 1124;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);


template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};


enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};


struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  };


TfLiteContext ctx{};

// Tensor table with space for -1-th element used
// designate missing optional inputs/outputs.
TfLiteTensor tflTensorsWithMinus1[12];
     
TfLiteEvalTensor evalTensors[11];

TfLiteTensor * const tflTensors = tflTensorsWithMinus1+1;

TfLiteRegistration registrations[OP_LAST];
constexpr size_t kOpNodesCount = 4;


TfLiteNode tflNodes[kOpNodesCount];

const TfArray<2, int> tensor_dimension0 = { 2, { 1, 784, } };
const TfArray<1, float> quant0_scale = { 1, { 1, } };
const TfArray<1, int> quant0_zero = { 1, { -128, } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int8_t tensor_data1[16*784] = { 
  -46, 45, -10, 32, 22, -36, -40, -26, 40, -20, 44, -19, 33, 5, 37, 1, -37, -19, 5, -12, 50, 2, -47, -39, 38, -9, 29, -1, 37, 13, -13, 37, -13, 28, -25, 11, 2, -40, -20, -45, -31, 32, -28, -34, 46, -16, -42, -25, 14, 48, 5, -47, 40, 38, -39, 5, -47, -22, -25, 28, -44, -16, 20, 42, 48, -20, -8, 37, -55, 29, 1, -30, -31, 47, -39, -27, 10, 1, -43, 28, 6, -43, 40, -3, 22, 41, -51, -39, 22, -37, 27, 37, -54, 20, -46, -49, -43, 13, -52, -54, -55, -59, -28, 22, -7, -40, -41, 8, -22, -9, -27, 46, -13, 6, 47, 32, -49, 24, 33, -9, -4, 18, 34, -47, 45, 10, 38, -39, -46, -28, -18, 54, 27, -28, 27, -17, -21, 44, -30, -33, 12, 45, -7, -20, 29, -7, -25, 43, -44, 24, -26, 31, 25, -44, -54, -11, 7, -25, -7, 27, 2, 21, 35, 30, -13, -39, -23, -43, -6, 12, -42, -24, 20, 18, -5, -38, -6, 1, 37, -35, 22, 14, -34, -73, -67, -30, -11, -12, 16, 6, 68, -5, -23, -13, -33, 16, -44, -22, 44, -48, 38, 39, 9, -12, -45, -3, -39, -7, -28, 7, -60, -26, -32, -31, -49, -23, 32, 29, 32, -4, -7, -48, -21, -36, -30, -13, 47, 37, 13, -23, -46, 30, -34, 34, -18, -21, -56, -51, -45, 21, -34, -5, 47, -9, -24, -30, -29, -29, -52, -6, -41, -5, 41, -21, 15, -39, 40, -29, -44, -37, 39, -65, -47, 32, 10, -31, -58, 7, 31, -15, 48, 11, -48, -14, -38, -4, 18, 6, 16, -48, 32, -45, -35, -2, -5, -8, -20, 35, 23, -7, -66, -36, 26, 17, 3, -31, 9, -32, 17, 22, 24, 18, -3, 39, 24, 36, 46, -48, -15, -34, 21, -24, 56, 41, -49, 36, -44, -61, -1, -49, -14, -34, 38, -17, 49, 6, 16, 35, -51, 30, 32, 47, 17, 24, 14, -21, -21, 18, -42, 23, 38, 35, -50, -8, -35, 9, -6, -27, 9, -18, -30, 45, 3, 0, 30, 9, -35, -8, -46, 11, -34, 19, -26, -46, -23, -13, -16, -13, 45, 0, -42, -14, 13, 12, -23, -10, 8, 34, -29, -2, -21, 5, 46, -5, -42, -36, -36, 38, 9, -47, 28, -46, 47, -42, 20, 10, -40, 15, -42, -46, -44, -50, -62, -2, 13, 41, 26, 15, -16, -7, -5, -3, -21, -38, -53, -50, -4, 12, -14, -11, -48, -31, 7, -50, 45, 20, -16, 36, -8, -26, 9, 21, -1, 13, -29, -12, -37, -3, -6, -15, -54, 32, -21, -33, -20, -24, -39, -50, -39, -30, 27, -39, 3, 8, -64, 20, 25, -27, 4, 30, 27, 42, -46, -6, 11, 21, -20, -53, 4, 18, -41, -30, 6, 30, -6, -19, -41, -43, 21, -46, 34, 21, 34, 5, 5, 41, 33, 40, 37, 22, 19, 38, 12, -46, 5, -39, 10, -44, -8, -39, 27, -13, 9, 40, 49, -34, -29, -50, -54, 47, -6, -41, 31, 2, -46, -17, 41, -33, -39, -38, -32, 38, -9, -37, 0, -52, 29, -68, -30, -26, -50, 37, -39, 0, -13, -4, -11, -13, 38, -31, 49, 48, 5, 19, 46, -46, -41, -7, -17, -15, 25, -34, -34, -21, -13, 32, 8, -14, 40, 14, 30, -38, 8, -10, 14, -3, -22, -13, -11, 47, -19, 27, -48, 11, 1, -39, -66, 7, -3, 47, -27, -46, 28, -14, 43, -45, 20, -11, 36, -13, -11, -44, 13, -18, -18, 4, -5, 41, -52, -37, 5, -51, -31, -4, 11, 19, 16, 28, -36, -18, -58, 39, -14, -52, 15, -50, 9, 25, 36, 10, -44, -40, -11, -37, -6, 0, -10, 24, 6, -15, 7, 38, -53, -45, 54, 9, -10, 27, -42, 48, -50, -26, -16, -29, 31, -34, 45, 7, 43, 16, -15, 25, 24, 8, -35, -43, -24, -9, 13, -16, -8, 4, -25, 20, -2, -37, 56, -27, -36, 8, 46, 37, 40, -25, -1, -20, -60, 29, -50, -44, 15, 11, 32, 7, 32, -16, 49, 3, -54, 19, 1, -42, 36, 15, -43, -22, -27, -9, 48, 1, -7, -37, 0, 15, 13, 39, 27, -47, -30, -18, -30, -41, -33, -5, 29, -48, -9, -15, 42, -28, -43, 18, 8, 11, 14, 27, 6, -46, 17, 13, -28, 30, 5, -28, 26, 20, -36, -31, 30, -27, 34, -42, -23, 18, -37, 11, -15, 28, -17, -45, 19, 32, -45, 27, 15, 47, -34, -13, 10, 41, 19, -5, 40, -26, 51, -13, 18, -17, 48, -19, -19, -34, -40, -37, -46, 27, 22, -25, 1, 19, 29, -3, 24, -17, 
  35, -41, -48, 40, 50, 31, -8, 22, 22, 27, -25, -42, -11, 21, -14, 27, -50, -11, -17, -28, 22, -6, 12, 27, -28, 2, 42, -21, 47, -11, 40, 1, 19, 44, -21, 33, -7, -39, 37, 43, -2, 31, 25, 7, 46, -33, 22, 42, -39, -11, 8, 17, -1, -48, 42, -5, 10, -45, -3, -9, 28, -36, 50, 12, 57, -42, -10, 4, -52, 13, -24, -52, 18, -41, -30, 15, -16, 22, 33, -20, 16, -48, -29, -7, -29, 13, 7, 12, 24, -29, 56, -22, -46, -19, 16, -55, -89, -30, -8, -4, 10, -26, -13, -47, 1, 3, -2, -14, -45, -13, 12, -5, 21, 43, 26, 17, 1, -27, -37, 11, -16, 19, 12, 3, 14, -43, 8, 52, -8, -16, 9, -24, -28, -26, 26, -64, -60, 30, -14, -47, -19, -51, 31, -51, -29, 0, -43, -75, -56, -7, 0, -3, -3, 29, 27, -26, 20, -23, -6, 1, 32, 27, -22, -14, 8, 54, -35, -21, -42, -14, 23, 0, 51, -5, -22, 24, 14, -69, -8, 6, -8, 32, 45, -27, 48, -37, 53, -41, 0, -30, 7, -46, 13, -21, -12, 26, 15, -25, -47, -7, -1, -38, -22, 28, -2, -20, -20, -8, -34, -1, -23, 53, -35, 47, -3, 10, 29, 0, -17, -25, 16, -28, -84, -29, -17, 5, 3, -50, -41, 21, -25, 32, -53, -23, 7, 29, 13, -11, -8, 39, 25, 34, 20, -7, 32, 15, -28, 20, -48, -74, -18, 37, -14, 48, 46, -51, 17, -62, 14, 15, -8, 8, -41, 12, 49, -9, -31, 18, 28, 41, -27, 22, 39, -69, 29, -29, -21, -73, -16, 26, 18, 6, 36, 9, -47, 6, -49, 21, -53, 0, -36, -15, 8, 4, -36, 9, -80, 7, 10, 25, 15, -13, 28, -3, 9, -75, -24, 1, -49, 5, -9, 7, -47, -27, 2, -18, 14, 16, -52, 8, 37, -16, -60, -49, -33, -23, 23, -54, 43, 40, -30, -32, -41, -7, 8, -46, -11, 46, -5, -15, 23, 14, 22, -5, -11, -6, 15, 2, -40, -32, -58, -61, -5, -23, -6, 32, -46, -22, 30, 15, 67, 3, -45, 29, -34, 38, 48, 2, 4, 20, 5, -26, 15, 21, -20, -5, 3, -15, -69, 3, -24, -22, -41, 17, 40, 52, -12, 58, 86, -58, 42, -33, -13, -10, -40, -47, -29, 70, 47, 2, 32, 14, 1, 9, 10, -49, -15, -60, -12, -3, -1, -17, 7, 15, -25, -16, -11, 31, 13, 17, 0, 19, 41, 33, -9, 29, 23, -4, 4, -7, -35, 34, 6, -56, 10, -84, -21, -13, -23, -10, 1, -23, 32, -2, 36, -25, 22, -22, -2, 8, -27, -34, 27, -13, 3, 43, 38, -13, 31, 12, -46, -11, -47, -77, -73, 19, -15, 7, 45, 39, 40, 53, 31, 36, -10, -21, -47, -32, -17, -30, 44, 38, -40, 20, 7, 61, -39, -5, -74, -84, -5, 18, 14, -12, -9, -10, 14, -32, 21, -38, -30, 51, -18, 9, -43, -19, -51, -21, -23, -30, 30, 16, 33, 9, -14, 11, -42, -24, 16, 18, -13, -15, 49, 29, -6, -29, -19, 9, -47, 22, 16, 54, 26, -4, -24, 5, 46, -17, 9, -45, -30, 54, 33, -17, -36, -16, -29, -5, 0, -17, -25, -19, -31, 13, -45, 29, -70, -3, 39, -4, -11, -23, -39, -23, -62, 31, 17, 38, -6, 43, 31, 41, 40, 24, 4, -14, -10, -11, -12, -40, 34, 13, -2, 3, -29, -39, 22, 18, -26, -33, 25, 5, 10, -1, -9, 29, 29, -13, 6, -22, 51, -13, -10, -10, -7, -26, 29, -41, -2, -29, 12, -19, 10, -47, -12, -25, -24, 43, 41, -41, -44, 18, -6, 42, -31, -32, 46, -27, 19, 31, -16, -34, -2, 0, 1, -21, 8, -19, -43, -14, -46, -6, 5, 22, 44, -26, 21, -41, -55, 31, -44, 46, -29, 38, -27, 14, 15, 44, 38, 28, 2, -4, -5, -2, 7, 5, 30, 22, -54, 22, -47, -4, 12, -20, 47, 4, -23, -62, 24, 43, 43, 12, -60, 8, -7, -11, -7, 8, -4, 19, -3, 14, -63, 1, 16, -66, -34, 23, -40, 23, 2, -23, 2, 26, -37, 12, 45, -14, 14, -20, -53, -33, -29, -24, -23, -9, 7, 3, -48, -43, 18, -44, -39, -45, -37, 21, -26, -33, 4, 38, 41, -8, -29, -9, -47, -48, -17, -52, 22, 10, -39, -55, -53, -31, 51, 55, 13, -4, -58, -61, -55, -9, -18, 30, -32, -3, 3, -20, 17, -21, 2, 8, 41, -41, 1, 28, 41, 45, 8, -37, -23, 13, 26, 17, 33, -49, -1, -29, 9, 19, 51, 38, -39, -7, 
  16, 32, -20, -9, -16, -25, -27, 16, -17, 19, 41, 45, -49, 32, -27, -24, -34, 26, 34, -3, 39, -51, -11, 27, 26, 5, 31, 24, 35, -5, 37, -7, -7, -54, 33, 32, -49, -14, -35, 13, -46, -16, -3, -32, -31, -30, 31, 15, -19, 45, -48, 42, -16, -14, 19, 22, 44, 38, -36, 36, 21, 22, -12, 39, -61, -46, -14, -22, -18, 35, -24, -34, -27, 28, -32, -31, -49, -31, -11, -11, 15, -46, -35, -36, -38, -8, 20, -11, -38, -41, 9, -1, -52, -73, -52, -23, -58, -72, 2, -9, 20, -53, -36, 13, -26, 1, 52, -14, 1, -32, 1, -33, 24, -6, 51, 1, -12, -16, 17, -47, 10, 7, -40, -12, -13, 7, -44, -51, 25, -18, -28, 6, -53, 16, 10, -49, 15, 26, -19, -4, -13, -10, -34, -31, 26, 31, -6, -39, 0, -40, 12, -2, -4, 18, -80, 28, 8, 25, -24, 21, 39, 19, 26, 21, 30, -27, -49, 9, 21, -3, -6, 46, -25, 18, 15, 54, 26, 2, -13, -28, -63, -31, -44, -23, -17, 9, -32, 0, -32, 32, 7, 33, -29, 24, -17, 45, -23, 15, -43, 6, -32, -25, 9, 8, 32, -21, -34, -10, -33, 1, -46, -40, -56, -20, 34, -22, 38, 52, -6, 45, -29, -31, -24, 30, 35, -27, 26, 25, 18, 23, 4, -19, 25, -27, 15, -44, -3, -38, -62, -51, -27, -32, 1, -3, -30, 13, 22, 25, 11, -45, 17, -6, -10, 8, 0, -42, -23, 15, -30, 5, 8, 20, -33, 2, 6, -48, -4, -24, -13, 15, -28, 14, 4, -2, -2, -46, -5, -23, -11, -13, 39, 43, 60, -75, -40, 10, -10, -27, -42, -27, -3, 1, -39, -5, -52, -31, -25, 26, 12, -9, -38, -16, -1, -41, -14, -5, 56, -37, 24, 39, 13, -51, 35, 17, -32, 20, 2, 5, 36, -29, 24, -35, 21, -12, 32, -2, 24, 32, 7, -22, -37, 12, 59, 60, -10, 33, 41, 48, -16, -70, -13, -48, -19, 19, 8, 26, 21, 41, -60, -77, 25, -46, -20, -11, -34, -41, -38, 2, -15, -43, 35, 64, -27, 21, 22, -22, -35, 16, 39, -4, -12, 6, 26, -1, 34, 39, -7, 12, -9, 10, -16, 46, 2, -12, 38, 3, -41, -18, -70, 50, 0, -48, -11, 18, -66, 18, 10, 18, -11, 46, -7, 43, 25, 56, -19, -29, -16, 12, 10, 23, -30, 5, 23, -20, -15, -44, -30, 24, 57, -23, 34, -10, -35, 52, 34, 0, -12, 42, -2, 28, 44, -20, 3, 23, 25, -43, 43, 17, 58, 41, 60, 42, 21, -45, -42, 14, 69, -8, 18, -5, 26, 13, 32, -38, 45, 31, 23, 49, -22, 5, -8, -22, -18, 38, -5, -13, -14, 15, 44, -35, 17, 44, 34, 26, -9, 21, -43, 41, -50, -17, -29, 19, 30, -27, 16, 5, -23, -11, -20, -13, 59, 16, 43, 22, -23, 40, 19, -44, -11, -24, -24, 37, 9, -43, -15, -24, -45, -37, 53, -31, 26, 0, 16, -32, 30, -31, 11, -11, 34, -18, 23, 25, 10, -15, -7, 21, -41, 13, -40, -54, 17, 9, -35, 33, 18, 19, 34, -26, -64, -16, -23, 9, -75, -27, -46, 39, -21, -23, 2, 32, -64, -2, -35, -35, -18, 54, 21, 20, -42, -29, 48, -27, -3, -17, 9, 16, 28, -11, -96, 5, 17, -35, -2, 22, -19, -7, 27, 0, 29, -76, -42, -13, 27, 27, 36, 55, -16, -24, -7, -19, 10, -24, -18, 16, -2, -59, -29, 5, -50, -11, 41, 21, 35, -26, 9, 34, -10, -27, 34, -31, 3, -17, -35, 17, 50, -11, -44, 34, 38, -61, -1, 12, -22, -22, -7, -39, -34, -33, -43, -59, 16, -28, -34, -60, 25, 4, 32, -19, 14, 16, -12, -49, 30, 39, -46, -6, -2, 21, 61, -17, -4, 11, 12, 45, -39, -43, -25, -24, 9, 0, -21, 33, 8, -37, -1, 72, 22, 27, -20, -38, 1, 21, -22, 50, -46, 29, -27, 8, -1, -26, -33, 12, -23, 8, 0, -28, 18, -4, 25, -23, -28, 40, -15, 42, -16, 7, -40, 25, -26, 29, -1, 28, 42, 39, -22, 4, -1, 15, -14, 29, 22, 8, 4, -74, -5, -42, -19, -28, -16, 38, -21, 33, 18, 47, -25, 25, -51, -6, -2, -48, 26, -39, 26, -43, 20, 27, -39, -65, -29, -8, -51, -20, -26, -47, 12, -47, -9, -7, -30, -42, -24, 15, 28, 6, 15, 34, -32, -43, 16, -42, 43, 24, -11, 2, 5, 50, -40, -16, -26, -24, 2, -62, -59, -35, 12, -18, 15, 30, 25, -14, 31, 46, -29, 13, 
  22, 17, 32, 39, -42, -4, -50, 25, 40, 33, 50, 32, 14, -34, -25, 40, 50, -39, -21, -15, -29, 30, 50, -41, 47, -8, 26, -32, -28, 23, -36, -37, 5, 36, -20, 44, 25, -35, 26, -14, -2, -29, 26, -19, -21, 20, 21, 28, 2, 3, 3, -14, -1, 3, 9, -29, 25, -9, 39, 51, 35, 15, 34, -42, -10, 23, 22, 9, -58, -34, 25, 0, 46, 33, 20, -4, 18, -7, 45, -52, 50, 43, -32, 20, -12, 29, -5, -40, -32, 17, -35, -7, -41, 2, -4, -42, 17, -15, -18, 12, -45, -43, -31, -34, -15, 27, -26, -31, 19, -51, -12, -4, 6, 19, -50, -4, 0, -29, -24, -43, 20, -14, -2, 35, 19, -57, -8, -41, 30, -61, -48, 0, -49, 0, -24, -15, -19, -11, 7, -29, -28, 2, -42, 6, -12, 49, -45, -5, -46, -17, -11, -27, 7, -45, -34, -19, 4, -16, -50, 5, 11, -55, -42, 39, 44, 27, -17, 9, -19, 46, -38, -50, -20, -28, -49, 8, 5, -54, 17, 18, -35, -51, -56, -20, 4, 21, -23, 15, 22, 33, 38, -29, -29, -35, -18, -47, -37, 36, 16, 33, 34, -13, 37, 24, 38, 22, 30, 19, 12, 30, -57, 9, 16, 26, 17, 8, 24, -16, -9, -41, -48, 17, 39, 26, -20, -24, 23, 46, -26, -33, 9, -49, 22, -17, -19, 7, 36, -25, 10, 2, -16, -16, -62, -56, -15, 23, 5, 13, 31, 6, -30, -42, 8, -6, -23, 0, 0, -26, 41, 13, 22, 0, -21, -52, -58, 11, -27, 35, -8, 1, -61, 4, -3, -6, -7, 16, 29, -40, 46, -30, -14, 14, 28, -49, 40, -51, 35, 7, -48, 33, 7, 14, -47, 22, -18, -30, -42, -8, -2, -6, -50, 11, -45, 26, -21, 25, 8, -2, 21, -7, 30, -37, 2, 3, -11, -30, -16, 5, -5, 28, -45, 8, -52, -46, 23, -63, -58, -3, -14, -10, -35, 3, 17, -15, 14, -11, 12, 12, 11, -34, -45, 47, -21, 11, 34, 33, 40, -22, -29, -31, -12, -39, 25, 32, -10, 30, -16, -20, -36, -26, 9, -21, -20, 21, 34, -44, 40, 12, 27, -22, 41, -35, -20, -62, -11, -18, -7, -58, 28, -65, 25, 22, 27, -34, 40, -18, -15, 45, -25, 36, 44, -12, -31, -2, 28, 33, -38, -10, -20, -50, -32, 25, -22, 11, -27, -64, -54, 18, 29, -27, -15, 36, -12, -38, -53, 44, 7, 20, 5, 17, 50, -8, -2, -25, 38, -14, -25, -41, 3, -25, 17, 8, 20, 28, 23, 19, 20, 4, -6, -17, 40, -55, -18, -36, -37, -39, -19, -40, -47, 25, -21, 33, -29, -11, 9, -9, -33, -37, -23, -25, 30, 4, 24, -24, -23, -33, -10, -30, 23, 32, -31, -42, -45, 11, -49, 45, -47, 20, 30, 30, 35, -20, 4, -42, -55, 40, 4, 35, -29, 28, -18, 8, -22, -50, -32, -41, -20, -55, -50, 14, -8, 14, -46, 3, -46, -48, -3, -40, 34, 36, 16, 44, -8, -22, -58, -6, 10, 19, -22, -45, -43, 0, 22, -8, 29, -1, 39, -8, -22, 3, -18, -6, -45, -24, -27, -17, 14, 35, -33, -38, 18, 19, 1, 19, 28, -36, 2, -51, -19, 9, -52, -9, -58, -48, 13, -53, -35, 0, 24, -4, 12, 8, 4, 13, 3, 20, -53, -22, 44, 25, 8, 16, 0, 10, -2, -31, -13, 18, 17, -55, 33, -53, -29, -41, -43, 10, -51, 31, 12, -17, 22, -17, -11, -33, -22, -39, 42, -50, 14, 17, 32, 22, -48, -37, 7, 12, 14, 18, 6, 26, 33, -25, -38, -13, -12, 6, 15, -47, -32, 45, -46, 8, -53, -3, 31, -28, -36, 11, -56, -32, -50, -33, -31, 20, -56, -57, 21, -18, -55, 5, 3, -34, 12, -1, 4, -1, 34, 16, 43, -14, -13, -37, 1, 13, 1, -6, -50, 3, 38, -24, -48, -9, 0, 22, -15, -29, -4, 20, -38, 16, 35, -39, -32, 7, 50, -24, -41, -29, 9, 13, 7, -55, -45, -54, 41, -39, -26, 5, 2, -16, 14, 20, -30, 46, 43, 28, -27, 41, -27, -35, 50, -31, 51, 28, -43, -15, -15, 34, -53, -51, -12, -28, 34, 36, -13, -25, -12, -47, -19, -57, -14, 44, -1, 7, 51, 44, -1, -25, 45, -28, -2, -44, 8, -29, -27, -23, -46, -1, 36, -38, -32, 14, -34, 49, 27, -5, -22, -26, -18, -9, 23, -5, -14, 40, 21, -48, -49, 2, -8, 1, -2, 6, -46, -35, 0, 9, -24, -30, 23, -41, -46, -10, 10, -47, -51, 42, 27, 30, 22, -18, -49, -29, -30, -21, 
  -20, -37, -14, -50, -24, -50, 42, -2, -31, 18, -3, 32, -39, 48, -8, 40, -36, -18, -4, -17, 21, -12, 22, -48, -25, -27, -44, -39, 40, -43, -33, -43, 17, 34, -33, -41, 19, 43, 4, -18, -47, 26, 35, 7, 28, 39, -26, -37, 48, -7, -34, -14, 20, -9, 26, -5, 28, 32, 37, 28, 16, -46, 27, 52, -23, 9, -44, -32, -12, 44, -6, -13, -19, 11, 38, 42, 55, -21, 41, -42, 41, 10, -48, 7, -19, 20, 29, -33, -48, -41, -34, 30, -37, 7, -5, 37, -1, -4, 9, 36, 35, -6, 3, -6, 28, 28, -25, -2, 26, 25, -48, -4, 5, -49, -13, -8, -51, -51, -38, 34, -10, 7, -7, -17, 30, -40, -25, 0, -12, 46, -41, -26, 21, -35, -30, -43, 47, -25, -36, 32, 4, 44, 30, -19, 45, 7, 35, -39, 46, 35, -21, -32, 10, -55, 27, -24, -3, -42, 34, -30, -42, 33, 27, 4, 27, -38, 20, 0, -26, 9, -12, -27, -33, -22, -14, -44, -4, -13, -55, 44, 14, -9, -35, 24, 0, 16, -31, -21, 2, -1, -35, -30, 38, 39, -59, -26, 36, -48, -35, -29, -33, -2, 33, 13, -38, -14, -10, 10, 4, -10, 22, -36, -11, -8, -23, 10, -19, 16, 19, 9, -40, -6, 24, -13, 29, 15, 6, 18, -46, 28, 3, -44, -24, 33, -54, 5, -26, -19, 27, 20, -48, -3, 19, -60, 9, 15, -38, -52, -43, -55, 2, 24, 33, -24, -5, -32, -35, 14, -47, -26, -17, -26, 31, 30, -12, 40, -59, 8, 6, -18, 26, -3, -56, -2, 10, 4, -52, -40, -53, -1, 42, -23, -40, 6, 9, 44, -1, 37, 15, -26, 8, 2, -60, -9, 44, -49, -2, 27, -23, 21, -50, 35, -16, -12, 38, -19, 19, -7, 44, -25, 3, 27, -18, 4, -29, 13, 30, -1, 12, -16, -35, 31, -19, -13, 23, -22, -57, -21, -3, -4, 8, -6, -28, 6, -15, 12, -41, 37, 42, -47, 41, -35, 17, -6, 44, -23, -24, 18, 30, 9, -23, -43, 0, 23, 31, 20, -51, 45, 2, -29, 12, -15, -4, -5, -37, 0, 15, 17, 45, -33, -37, -45, -35, 21, -33, -33, -55, -22, -6, 27, -46, -26, -36, 33, -10, -40, 14, 47, 11, -7, -6, -29, -28, -8, -26, 23, 48, -19, 16, -4, 14, -44, 14, 19, -41, -2, 17, -23, -5, 20, -3, 19, -41, -25, 13, -31, -12, 40, 37, 17, -34, 45, -15, -1, 31, -14, 24, 42, 32, -21, -25, -4, 26, 21, 6, 30, -51, -1, -16, -14, -7, -47, 31, -33, 10, 26, 22, -48, -15, 10, 9, -10, -33, -23, -38, -12, -42, 38, -5, -23, 4, -10, -15, -30, 20, -35, -34, -36, 13, -3, 5, -36, -54, 31, -1, 5, -28, -46, 6, -6, 32, 34, 37, 35, 37, 21, -47, 43, -1, 1, 6, 19, -15, 32, -43, -36, 41, -35, 2, -56, 4, 25, -8, -47, -50, 20, 24, 11, -12, -23, -3, -25, -22, -40, -21, -28, 45, 50, -23, -10, -46, 42, -36, 28, -34, 23, -23, 30, 41, -5, -45, 15, 7, 49, -33, 34, -38, 5, -53, 6, -32, -22, -21, 14, -42, 26, 1, 38, -2, 25, -19, -41, -4, -56, 23, -6, 1, -50, 28, -6, 13, 39, -48, -18, -17, -39, 14, -20, -41, 29, 16, 19, 14, -1, -14, 13, 35, -17, -49, 21, 36, -9, -49, 14, 45, 40, 9, 4, -42, 10, -46, -43, 23, 41, -6, 23, 36, -36, -3, 41, -2, -12, -7, -1, -22, -11, 0, -32, 35, 34, -17, -27, 49, -44, -16, 7, -51, 36, -40, -3, 24, -27, -52, -15, 14, -29, -16, 25, -7, 8, 36, 27, -10, -32, 25, -9, -38, 19, 1, -34, -49, -16, 7, -12, 11, 11, -24, 10, -17, -20, 32, 2, -25, 5, 27, -31, -5, 12, -52, -20, 39, -24, -35, 14, 30, 27, 27, -44, -6, -44, 24, 36, 29, 27, -48, -20, -29, -6, 31, 6, -30, -26, 30, -34, 1, -36, -30, -33, -2, 35, -51, 41, -47, -39, -8, 45, 34, 8, -8, -42, -36, 47, 28, 4, -23, -11, 40, 39, 27, -34, 12, -24, -22, 18, -11, 2, 18, -17, 18, -6, 49, -12, 12, 26, 34, -4, -36, -39, 37, -16, 32, -25, 17, 9, 38, -49, -2, -9, 45, 42, 23, -25, -12, -11, 34, -52, -49, -35, 12, 45, -4, -42, 0, -12, -15, -9, -51, 23, -41, 49, 9, -10, -50, 14, -25, -42, 6, 4, -14, 32, -34, -50, 33, -29, 51, -42, -10, 18, -8, 23, -51, 12, -7, 11, 
  -13, -28, 38, 25, 30, -16, 20, 24, -49, -29, 41, -30, 51, -51, -47, -10, 41, -31, 4, -4, 38, 24, 31, -45, 14, -18, 38, 49, -2, 1, 9, 38, 19, -32, -31, 4, -39, 22, 11, -15, -52, 41, -40, 5, 40, 42, -42, -12, 40, -8, 7, -50, 18, 33, 45, -26, 44, -13, 26, 43, 27, 54, 55, -1, 23, -21, 32, 37, 46, 29, -14, 13, -41, -33, 47, -26, 9, 32, 30, -44, 17, 18, -39, 8, 8, 42, 0, 11, 33, -31, 18, -43, 6, -8, 4, 2, 62, -4, -37, -56, 8, -65, 16, 19, -2, 3, -16, -34, 25, -27, 13, 38, 49, -32, 37, 20, 24, -20, -32, 34, 44, -12, 39, -9, 50, -45, 23, -26, -36, 31, -46, 33, -21, -4, -63, -55, 52, 14, 50, 15, -50, -29, 41, 9, 28, -10, 57, 29, -29, 11, 25, 9, -5, 37, 14, 2, -32, -6, 4, 19, -24, -23, 18, -35, -7, -46, -42, -47, -50, 15, 16, -20, 44, 16, 36, -15, 39, -14, 2, 55, 25, -34, 9, 30, -35, -17, 11, 46, 25, -20, -45, -62, 22, -10, 8, -23, -3, 12, -51, -21, -23, 23, 13, 20, -30, -6, -30, -7, 10, -35, -34, -13, 15, -6, -23, -6, -29, 25, -38, -12, -44, -22, 34, -26, -40, 40, -4, 29, 9, -59, -47, 12, -16, -52, -39, -4, -42, -48, -29, -33, 41, 61, 29, -10, -33, 10, -34, 25, -49, -20, -19, -23, -10, -42, -48, -24, -37, 9, -23, -22, 36, -26, -80, -24, -57, 8, 36, 29, 35, 0, 0, -19, 5, -35, 28, -44, 6, -45, 12, -21, -30, -31, -2, 38, 20, -4, -31, -44, 0, 14, -52, 12, -8, -8, 41, -29, 39, 43, 24, 13, 10, -25, -35, 24, 9, -44, 27, -2, 27, 21, -6, -37, 44, 34, -46, -42, -67, -56, -26, -9, -37, -18, 10, 33, 16, -52, -9, 9, -14, 7, -48, -32, -33, -29, 27, -30, -38, 4, -52, -45, -11, 12, 30, -2, 35, -8, -22, 21, 55, 3, 0, 39, -54, 33, 27, -10, -8, -37, 32, -59, -24, 7, 49, 33, 35, 38, 26, 27, -34, 12, -51, -55, 32, -2, 2, 9, 21, -10, 19, -13, 50, -32, 5, 12, 21, 34, 24, -44, -20, 48, 12, -1, 27, -25, 20, 6, -43, 11, -6, -25, -41, 19, 22, -9, -54, 13, 25, -2, -24, 26, -28, 17, -29, 33, -46, -29, 12, -18, 4, -8, 40, -50, 9, -15, -15, 26, 18, 8, -30, -16, -59, -49, 28, 15, -20, -1, 23, -32, 30, -38, 12, -20, 1, -36, -9, 54, 8, 45, -25, -44, -39, 24, 24, 45, -22, -44, -64, 1, -65, -19, -11, 17, 2, 6, -41, -48, 42, -44, -20, -16, -32, -31, -31, 2, 14, 1, 20, 39, -32, 2, -26, -53, 0, -5, -56, -51, -45, -33, -13, -68, -18, -36, -5, 2, 31, 16, 41, 29, 52, 5, -29, -33, -24, 2, 19, 47, 31, -22, -37, -45, -22, -37, -60, 6, -8, 2, -31, 37, -25, -43, 27, 44, -30, -18, 6, 1, -34, -34, -42, -34, 27, -36, -44, -49, 12, 28, 21, -40, 8, 24, 17, 30, -27, -38, -30, -50, 14, -12, 21, -15, -15, 34, -42, 55, 17, 5, -55, 8, -6, 29, -13, -10, 19, 1, 29, -33, -57, 44, -40, 22, -3, -36, -5, 7, -43, -27, 21, 10, 8, 11, -2, 49, -33, -1, -53, 9, 35, -13, -47, -2, 5, -11, 13, -23, -8, -19, 9, -4, -3, 10, -44, -6, 32, 18, 11, 16, -16, 7, -51, 9, -39, -13, 39, 9, -46, -7, 49, -9, -50, -32, 18, 42, 13, 46, 32, 14, -9, 40, -32, 20, 43, -42, -25, -14, 1, -32, 26, 33, 5, -30, -38, 20, -43, -3, 10, 46, 25, 58, -18, 6, -50, 38, -16, 21, -10, -11, 10, -24, -2, 27, -26, 12, -38, -22, 9, 12, -35, -27, 10, -13, 26, 3, 18, -30, -11, 20, 0, 9, 21, -26, 40, -2, 51, -38, -28, -24, 47, -43, -31, -31, 23, -28, 10, 34, -2, 39, 15, -38, 13, -42, 28, -23, -6, 19, -37, 4, 20, -22, -14, -18, 14, -5, 32, 32, 42, 52, -49, 34, 16, -9, -31, -13, 28, -26, -10, -6, -1, -47, 14, -23, -47, 49, -45, -7, 38, -28, 41, 10, -25, -10, 30, -43, -23, 25, 12, -19, 24, 1, 14, -15, -46, -50, 22, 45, -27, -16, 16, 35, -38, 22, 32, 33, 20, -29, 41, 0, 46, 11, -5, -35, 4, 43, -2, 33, -48, -41, 22, -14, -13, -41, -22, 9, 35, -20, 
  -38, 50, 23, -19, 25, 50, 10, 24, 36, -42, -44, 43, -33, 5, -9, -13, -15, -24, 33, 36, -50, 16, -5, -22, -32, -47, -48, -21, -31, 21, 49, -41, 37, -25, -8, -24, -14, -33, -12, 25, 44, -2, -44, 13, 0, 51, 36, 32, -40, 36, -18, 15, 22, -44, 45, -11, -10, -6, -9, -41, -27, 44, 14, 45, -3, 36, -20, -39, 0, -19, 30, -41, -14, 36, 38, 25, 8, -6, 4, -41, 22, -3, 38, -41, 19, 0, 14, -38, -43, -24, -36, -23, -13, 19, 0, -40, -25, 8, -26, 14, 31, 41, 23, -1, 42, 42, 44, -37, -43, 12, 49, 10, 25, -9, -13, 43, 3, 47, -35, -1, -1, -41, -3, 14, 34, -49, 18, -1, -34, -37, -40, -20, 23, 1, 38, -18, -6, -15, -16, 28, 21, 22, -15, 26, 38, -44, 40, 26, -46, -12, 1, -48, 46, -27, 45, -48, -24, 34, -11, -4, -8, 4, 17, -18, 11, 35, 48, 4, 19, 33, -4, 41, -17, -13, 42, -24, -12, 21, 9, -12, -18, 19, -17, -9, 23, -22, -19, 38, 2, 10, -53, -19, 32, -34, -30, -36, -35, 23, 15, 37, -20, -17, -20, 35, -20, 47, -42, -24, 33, -53, -35, 1, -44, -11, -12, -4, -51, -48, -46, 21, 43, -16, -15, -11, -46, 29, 16, -5, 46, -13, -5, -23, 16, -15, -45, 26, -11, -9, -7, -16, -27, -3, -51, -15, 41, 39, -19, -51, -42, -31, 48, 26, 30, -2, -39, 34, 2, 26, 19, 19, -23, -12, -41, -4, -2, 14, -49, -55, 8, 36, 28, 1, 5, 27, -24, -19, -27, 47, -26, 2, 41, 5, -40, 23, 45, 42, -2, -30, -2, 7, 7, 33, -16, 28, -1, 11, -10, 1, -28, 0, 18, -27, -37, -20, -30, 34, 11, -12, -18, 17, -50, -10, 33, 23, 14, -8, -16, 32, 14, -44, 21, -45, -35, -8, 34, 22, -11, -9, 20, 0, -29, 37, -45, 13, 33, -49, 49, -39, -31, -16, 20, -9, 35, -50, 12, -33, 10, -8, -47, -23, -28, 11, -4, -18, -51, -47, 39, -3, 10, -10, 0, 1, -30, 33, 35, -7, 6, 13, 26, 25, 14, -21, -12, -6, -58, -38, -5, -8, 31, -14, 31, 33, -55, 5, 8, -41, 44, -18, 20, 37, -49, 12, 13, -45, 29, 34, 10, 4, -35, -9, 6, 33, -31, 18, 4, -38, 29, 33, 6, -1, -37, -48, -39, -1, 7, -28, -26, 21, 33, 3, 46, -34, 10, 24, -25, -42, 8, 14, -39, -7, -30, 30, 28, -18, 22, -14, -22, -32, -1, -49, 38, 47, -9, 2, 32, -24, 2, -3, 26, 14, 16, -47, -14, 26, 21, -10, 10, -14, -21, -56, -43, -14, -41, -57, -12, -15, -12, -34, -44, -51, 9, -50, -13, 39, -25, 15, 50, -43, -44, 15, 1, 33, 28, -32, 46, 11, 33, 3, -43, 23, 34, 21, -41, 34, 41, -16, -11, -18, 16, 16, 22, -12, -50, 6, 51, 29, 8, -16, 14, 27, -2, -16, 42, -7, -23, -46, -24, 31, 28, -54, 26, 6, -42, 39, -32, -30, 31, 45, 44, -15, -18, 28, -37, -1, 2, -45, -33, -27, -36, -49, -44, -20, 17, 39, -3, -57, -21, -21, 11, -42, 3, 39, -15, -5, 6, 30, -10, 29, 38, -45, -44, 30, 16, 35, 51, 1, -1, -1, -18, -30, 10, -50, 23, -35, 30, 36, -11, -53, -28, -18, -47, 41, -9, -7, 20, -19, 32, -6, -2, 38, -22, -9, 2, 47, 42, -48, -6, -29, 13, -38, -38, 18, 38, 13, 20, 17, -33, 16, -16, 12, -29, 20, 23, -48, 47, -46, 25, -44, -30, 29, -48, -8, 39, -42, 48, 18, -36, -25, -16, -35, -20, 31, -23, -20, -15, -41, -51, -45, -32, -37, 34, -42, -28, -32, -50, 38, 46, 18, -1, 50, 40, 26, 43, 15, 20, 36, 36, -21, 25, -30, 40, -4, -36, 11, -3, -16, -26, 6, 9, -30, 10, -46, 2, -42, 25, -9, 51, -8, 42, -34, 32, -5, -12, 27, -10, -51, 32, -10, 2, -2, -16, -34, 8, 1, 20, -10, 1, 3, -45, 29, 34, 45, -29, 30, 21, 10, 1, 15, 1, -19, -43, -27, 41, 19, -19, -4, -31, -5, -25, -8, 3, -6, 14, -45, -9, -41, 33, 43, 12, -5, 16, 28, -44, -12, 9, -3, 44, 21, -7, -51, -3, -21, 38, -31, 6, 42, 45, -22, -31, 16, -11, 42, 14, -26, -39, 44, 46, -30, 26, 40, 13, -43, -2, 8, -4, -5, -39, 34, -37, -10, 7, -1, -15, 12, 19, 39, -1, 46, 6, -17, 20, -31, 5, -5, 
  17, 34, 12, 43, -38, 46, -27, -18, -30, 23, 36, -17, 41, 41, 48, -17, 3, -34, -17, 4, -21, -32, 51, -35, -19, 14, -37, -18, 33, 22, 9, 6, 11, -3, 17, 28, -21, -1, -44, -37, 28, -24, -33, 17, -28, -17, 37, 14, -35, -22, 27, 31, -42, 50, 37, -7, 25, 12, 28, 1, 36, -21, -31, -44, 11, 17, -27, -23, 7, -10, 40, 10, 20, -19, 38, 44, 19, 12, 46, 6, -20, -31, 46, 49, -42, -14, -21, -32, -15, -20, -7, -14, -48, 8, 9, 15, -48, -13, 2, 56, -4, 33, -16, -1, 7, -27, 12, 33, -16, 29, 19, -9, 31, -30, 38, 46, 27, 40, -25, -24, 21, 18, 39, 27, -54, -26, 16, 15, -40, 30, -41, -2, -50, 30, -13, 22, 7, -51, 33, 22, -18, 33, 26, 29, -32, -30, -37, -29, 27, -39, -23, 15, 24, 34, -17, 32, -5, -18, 18, 13, -48, 6, 32, -37, 47, -47, -10, 48, -14, -14, -32, 43, 35, 48, -42, 5, -50, -24, -51, -32, 17, 16, -31, -54, 12, 7, 38, 20, -41, 2, -48, -13, -15, -23, -3, -28, 15, 22, -28, -9, 3, 42, 37, 4, -51, -51, -38, 30, -6, 7, 12, -11, -30, 9, -13, 20, -52, 33, 21, -45, -8, -15, -1, 17, 14, -7, 44, -51, 41, -39, 34, 27, 41, -57, -7, 30, -24, -52, 14, -10, -34, 31, -2, -54, -43, 21, -11, 39, 40, 15, -10, -47, 22, -7, 50, 5, -53, 12, -21, -8, -5, 24, -29, -13, -42, -33, -49, 24, -40, 26, -14, -38, -53, -12, -6, 35, -25, -36, 8, -2, 15, 45, -24, -43, 48, 25, -34, -44, -30, 30, 37, 25, -15, 15, 22, -59, -18, -42, -8, 23, 2, 43, -35, -29, -6, 13, -50, 9, -2, -22, 18, 1, 55, 26, 17, 33, 23, -37, 25, 8, 29, 14, 37, 6, 19, 42, -54, -9, 39, -26, -26, 40, 6, -21, -4, 32, 34, -14, 47, 65, -24, 21, 18, 18, -11, 39, 30, -2, -4, -12, -37, 35, -9, -47, 44, 34, 32, 44, -47, 19, -45, 31, -26, 36, 18, 47, 27, 47, 4, 12, -49, -29, 32, -55, -14, -5, 28, -56, -48, -14, 48, -47, -28, 35, 26, -40, -53, -29, -46, -13, 49, 34, 42, 38, -40, 28, 51, -10, 29, -29, 40, 14, -38, 21, 19, -17, 27, -47, -21, -8, -62, -8, 45, 7, 13, 4, -6, -5, 2, 44, 50, -45, 42, 7, 48, 1, -29, 13, 27, 39, -48, -32, 25, -39, -25, -49, -46, 31, 18, 38, 14, -41, -34, -1, -25, -9, -48, -36, 15, -50, -45, 34, 9, -49, 14, -15, -34, 17, 35, -49, 22, -57, -54, 18, 36, 2, -42, 44, 6, -38, 41, -30, -48, -14, -44, 29, -15, 29, -4, 18, -34, -43, 25, -1, 27, 36, -16, 9, -16, 43, -42, 15, -54, -48, -25, 33, 19, -43, -15, -2, 3, 12, -24, 19, 36, 12, 22, 25, 45, -45, 45, 22, 13, 3, -34, 28, -49, 22, -54, 39, 1, -39, -49, -30, -28, -46, 38, -5, -3, -37, 43, 36, 38, -14, 1, 46, -41, -26, -12, -26, -42, -42, -34, 40, -13, 10, 38, -27, 15, -37, 19, -46, 40, -31, -22, -10, -30, -40, -12, -17, -47, -21, -21, -42, 50, -25, 42, -52, -22, 31, -22, 34, -29, 4, -31, 2, -30, -13, -56, -42, 11, -49, -5, -1, 13, 1, 29, 3, -1, 44, 9, -49, 37, 44, -38, 30, -16, 21, 25, 0, 10, 39, -3, 15, -57, 15, -54, 38, 17, 23, -3, 4, -35, 45, 31, -3, -21, 25, -10, -23, -46, -20, 27, -16, -27, 28, 18, -36, -39, -40, -46, -30, -20, -50, 29, -37, 28, -9, -7, 5, 26, 36, -15, 41, -17, 34, -36, -6, -32, -12, -25, -29, -48, 30, -17, -29, 6, -7, -46, 3, 12, -24, 23, 33, 25, 4, 10, -1, -18, -31, 22, 28, -23, -35, -16, 8, 24, -16, -46, 37, -59, 16, -53, 21, 10, 10, -54, 20, -27, 13, 22, 17, -29, -46, -37, -43, -38, -39, 33, 49, 34, -29, 13, 41, 2, -14, 20, 31, 5, 0, -47, -43, 43, 45, -48, -36, 15, -35, 20, -44, 2, -1, 32, 10, 1, 49, -2, 22, -1, 15, 37, 3, -49, 40, -26, -29, -42, 21, -17, -12, -33, -46, 19, -37, 4, 24, -27, -27, 36, 28, -14, 43, 18, -24, 23, 39, -18, 8, -39, -20, -34, 36, 10, -42, -37, 5, 45, -37, -41, 19, 10, 4, -49, 38, 25, 37, 48, 8, -49, -8, 24, -9, -13, 32, 
  -18, -22, 2, -45, -19, -36, 7, -36, -27, 7, 0, 33, -10, 0, -19, 7, -49, 39, -17, -44, 4, 37, -16, -13, -43, -11, -11, -21, 38, 8, 30, -38, 46, -14, -50, -33, -48, -39, -18, -10, -17, -3, 23, 22, -29, -2, 35, -13, 50, 21, 35, -25, -23, 19, 15, 1, -10, 33, 42, -4, -14, -40, -44, 47, -48, -29, 17, 22, 43, -22, -33, -11, 11, -46, 16, 39, -16, -51, -31, 32, -30, 7, -30, -20, -43, 32, -1, -10, 48, 41, 15, -3, 35, 25, 13, -56, 4, -7, 39, -2, 15, -7, -12, -55, -29, -22, -79, 28, 27, -48, -20, -11, 41, -47, 1, -33, -35, -1, -32, -46, 30, 35, -54, 40, 7, 20, -25, 17, -45, 29, 19, -31, -13, -54, 1, 4, 40, -17, -11, 46, -20, 12, -40, 40, 6, -39, 7, -23, 11, -1, -92, -80, -6, 4, -6, -24, -20, 45, -26, -11, -54, -60, -26, -51, 26, 2, -49, -16, -40, -51, -1, 37, -51, 43, -6, -28, 10, -11, -12, 8, 0, -48, -14, -22, -34, -24, 32, 3, 23, -40, -39, 19, -13, -23, 25, -19, -7, -33, 38, 4, -29, -34, -25, 15, -55, -45, -57, -41, 17, -23, 23, -3, -24, -21, -10, -34, -11, -33, -45, -42, -18, 21, -45, 4, 7, 20, -31, 54, -20, -6, 18, -14, -44, -66, 9, 14, -12, -17, -5, 25, -1, -2, 1, 5, -23, -38, 12, -7, 6, -27, -36, -18, -30, 14, -37, -17, 12, -16, -18, -15, -4, -25, -17, -46, -25, 18, 4, -47, 10, -23, -21, 22, 19, -20, -1, -54, -25, -18, -16, 36, 9, 13, 31, -10, 23, 17, -25, 17, -40, 9, -15, -57, -9, 7, 65, 20, 45, -51, -38, -49, 12, -60, -57, -34, 7, -68, 26, -6, -17, -41, 16, -30, -50, -50, 28, -31, -68, -8, 4, -2, 27, 3, 23, 22, 31, 26, 13, -13, 7, -32, -40, -12, 1, 30, 23, -35, -6, 14, 8, 12, -33, 35, -14, 59, -57, 5, 3, -35, 12, 12, 63, 15, -43, 15, 4, -29, -12, -22, -48, -2, 26, -46, 11, 35, -30, -30, -49, -17, -42, -6, -25, -52, 4, -27, -68, -54, -30, 32, -11, -2, -21, -11, -14, 8, 34, 9, -17, -61, 28, 12, -26, -10, 25, -32, -16, 34, -45, -44, 1, -35, 10, -4, 5, 17, 24, -17, 49, 24, 20, -8, -48, -31, -2, -45, 41, -46, -16, 37, 41, 4, 38, -48, 1, 31, -39, -51, 8, -58, -66, -39, 14, -4, -12, 11, 42, -7, 5, -29, -63, -87, 25, 18, -2, -4, 28, -50, 12, -40, 2, 1, 16, -22, -23, -36, 28, -16, 19, -44, -27, -47, 21, 8, 21, 9, 25, -43, -44, -71, 57, -21, -12, -22, 2, -30, 4, -39, 4, 8, 29, 19, 18, -11, -60, -68, -6, 26, -16, 23, 29, 14, 10, 7, -7, 7, -78, -6, -30, -43, -38, -2, 37, -39, 29, 45, 14, -32, -11, -14, -6, -28, 18, 2, -51, -7, 20, -18, 34, -5, 24, 11, -49, -15, -7, -6, 9, -20, 27, 25, -14, 48, -27, 8, 42, -36, 51, 42, -10, -5, -22, -28, 5, -35, 21, -17, -30, 29, 8, -3, -2, -10, 5, -16, -6, -51, -45, -44, -3, 1, -14, 22, 7, 26, 33, -46, -3, -20, -9, 20, 11, 42, -36, -22, 15, 22, -20, -32, 1, 10, -28, -31, -58, -69, 28, 0, -48, 18, 66, -23, 22, 44, 13, -37, -49, -26, 49, -43, 19, 13, 12, 29, 3, -35, 29, -14, 21, 18, 52, -29, -16, 14, -2, 14, -21, -28, 46, -21, -45, 6, 3, -22, -8, -43, -7, 18, 15, -22, 6, -52, 2, 28, -16, -19, 1, -12, -23, 34, -12, 9, 23, 40, 43, 42, 33, 27, 3, 48, 23, -27, 19, -30, -27, -64, -49, 35, 12, -30, -23, 5, -34, 34, 14, -32, 52, -25, -7, -1, 8, 25, 41, 28, 25, 23, -14, -49, -30, 46, 25, -41, 39, 21, -5, -19, 8, 10, -53, 6, -29, -33, -17, 68, -5, 21, 0, 26, 31, -32, 17, -11, -6, -32, 0, 18, -50, 10, -38, 17, -6, -41, -78, 2, -47, -67, -14, -70, 27, 0, 34, -36, -30, -47, 22, -1, -18, 41, -37, 33, -44, -6, -9, -51, -33, 27, -11, -4, 16, 0, 17, 36, -22, -20, 10, -3, 26, 16, -40, -9, -44, -27, 7, 6, -32, -46, 30, 5, -41, 46, 34, 28, 6, -3, 21, 9, 45, -10, 45, -1, -59, 4, 15, -39, -50, -47, -33, -15, 33, 27, 46, -48, 42, 5, -5, -41, 26, 23, 
  -32, 14, -31, 35, -16, -44, 32, 25, -8, 6, -5, 32, -24, -32, 7, 12, -5, 0, 44, -49, -12, -8, -51, -23, -49, -43, 9, -28, -11, -40, 26, 37, 51, 20, 65, 64, -15, 28, -49, -16, -30, -14, -4, 8, -60, -20, -60, -31, 11, 35, -13, 18, -14, 45, -19, 0, -38, 22, -51, -35, -30, 19, -11, 24, 12, 17, -2, 48, 2, 42, 32, 52, 0, -35, 29, -11, 34, -35, -35, -48, 13, 14, 23, 34, 11, -47, 21, -13, 2, 56, 46, 25, -16, 34, -25, -16, 58, -20, 55, -7, -13, 8, -7, 36, -28, 15, 4, -28, 14, -36, -51, 21, -3, -16, -43, -19, -42, -52, -18, 13, 18, 0, 65, 7, -9, 29, -23, 31, 69, -1, 26, -41, -17, -39, -40, -68, 22, 19, -2, 44, -49, -2, -18, 0, -24, -6, 18, -8, -25, 31, 11, 23, 36, 22, 34, 1, 22, 50, 20, 6, 28, -57, 22, 19, -10, -8, 19, 38, -48, -36, -13, 32, -5, -6, -33, 22, 32, 4, -21, 32, 20, 23, -4, -38, 45, -33, 29, 22, -26, -14, 5, 5, -51, -20, 49, -19, -51, -3, -29, -40, 62, -30, 21, -24, 7, -9, 18, -14, -37, 32, 29, -4, -19, 11, 17, 15, 21, 18, -3, 26, -15, -18, 39, 49, 13, 32, 45, 26, 14, 5, -32, 25, 0, 9, 15, 8, 19, 14, -8, 43, -14, 40, -34, 35, -9, -50, -8, 20, -19, -15, -13, 45, -18, 6, 45, -41, 12, 39, -10, 15, 17, -52, -6, 12, -48, 23, -34, -19, 51, -15, -4, -20, 2, -21, 2, -6, -7, 13, 30, 39, -35, -7, 43, 24, -34, -61, -18, -37, -51, 18, -54, 5, -28, -53, -12, -9, 0, 8, 12, 49, 46, 8, 10, -15, 0, -22, 56, -9, 9, -50, -18, 22, -56, -26, -56, -53, -68, -13, -5, -69, -46, -4, -44, -75, 39, 8, -29, -24, -20, 20, -33, -49, -9, -12, -36, 19, -31, -36, -3, -8, -3, 18, -65, -20, -89, -63, -43, -62, -87, -60, -12, -46, -42, -24, -14, -43, 38, -8, -11, -76, -17, 24, 6, 37, -41, 13, 4, 20, -20, -48, -53, -76, -30, -41, 0, -60, -19, -10, -4, -15, 2, 5, 5, -36, 20, -39, -31, -13, 1, -8, -36, 37, -42, 47, -25, 6, -12, -57, -5, 15, -25, -1, -40, 20, -21, -32, 27, -60, -6, 4, -54, 34, -1, -29, -59, 20, 18, -51, -38, 31, 32, -40, -45, 61, -3, -18, 39, 16, 17, -14, -22, 10, 13, 24, -10, 17, 7, -6, 14, 6, -52, 18, -33, -51, -34, 20, 37, -50, -7, -13, 32, 33, -11, -1, 38, -26, 19, 21, -29, 5, -18, 45, 40, -14, -57, 24, -35, 16, -22, -59, 14, -26, 21, 38, 91, 29, 2, -5, -24, -30, 57, 10, -14, 46, 31, -31, 39, 44, 30, 43, -26, -38, 39, 27, 4, -45, 19, 38, 11, 41, 29, 88, 44, -8, 31, 34, 9, 8, 55, -9, -6, 17, 27, 15, -26, 27, -16, 38, 37, 40, -26, -43, -29, 56, -2, 17, -13, 58, 26, 57, 60, 39, 4, 36, -14, 2, -13, 26, -26, -15, -18, -20, 35, 50, -10, -20, -31, -18, 20, 27, -10, -47, 30, -36, 46, -4, 12, 109, 18, -15, -23, 0, -20, -36, -30, -25, 52, 25, -14, 48, 24, -31, 35, 23, 31, -27, -26, -8, 49, 20, 24, 40, -1, 46, 9, 53, 75, -42, -10, 21, -28, 7, -9, 46, 53, -23, 29, -13, 19, -11, 28, 8, 1, 20, 48, -37, 18, -10, -22, 16, 76, 83, 6, 11, 31, -24, 1, -25, -37, -56, 30, 7, -44, 20, 16, 10, 15, -21, -43, -17, -50, -46, -34, 12, -47, 4, 16, 36, -32, 26, 84, 85, 7, -12, -29, -46, 4, 58, -4, 20, -19, -44, -14, 2, -30, 5, -21, 22, 11, -42, 33, 7, 39, 17, 17, 3, -35, 35, 65, 67, 54, 48, -31, 29, -20, -4, -55, -13, -13, -4, -68, 15, -35, 20, -22, -3, 2, -18, 6, -23, -15, 15, 2, 21, 31, 50, 34, 0, -10, 5, 28, -4, -38, 11, -72, -65, -8, -65, -64, -20, -10, -61, -11, 14, -65, -18, -31, 43, 8, 1, -41, 10, -18, 46, -4, -12, 34, 3, 19, -23, -38, 23, -23, -29, 32, -45, 45, 44, 13, -44, -3, -69, -37, 19, -51, -28, 18, 44, 7, 24, -9, 2, 25, 11, -39, 42, -14, 16, -7, -3, 49, -31, -34, 32, -17, -48, -9, 22, 19, 30, 23, -8, -28, -46, -34, -45, -42, 17, -6, 39, 19, 26, -46, 14, 
  23, -41, -10, 37, 1, 46, -13, -17, 22, -22, 29, 27, 22, 36, -31, -22, 46, -22, -27, -47, -33, -51, -19, 2, -11, 2, -12, -26, -26, -22, -43, -45, 40, -5, -9, -62, 42, 14, 51, -14, 36, 22, 38, 11, 33, 64, 38, -33, 7, 28, 19, -35, 25, -24, -28, -21, 39, -51, -45, -30, -44, 38, -26, 47, -2, 6, 22, 28, 30, 68, 46, 10, 5, 6, 21, 21, -23, 43, 19, 28, 36, -13, 32, -35, 35, 43, -48, 24, 48, -38, -26, 20, 37, -54, -46, 49, 12, 8, 3, 2, 10, 18, -37, 4, 47, 30, 11, -14, 62, 35, -7, -4, 31, -22, -2, -35, -62, 54, -56, 23, -30, 10, -67, 32, -33, -47, 7, -13, -16, 68, 9, 18, 0, -13, 12, 15, 14, -16, 1, 24, 23, 48, 12, 41, -34, -9, -38, -3, 1, 10, 5, -27, 15, -7, 0, 10, 0, -17, 19, 22, 42, 40, -53, -19, -26, -53, -46, 28, 48, -38, -11, -47, 31, 2, 16, 27, -15, -1, -46, 13, -37, -50, -46, -12, -51, 30, -60, 4, -50, -7, -59, -30, -82, 17, -30, 19, -50, -8, -37, -45, -50, -41, -23, 10, -22, 4, -22, -37, -41, -13, 29, -11, -26, -3, -3, -58, -63, -44, 20, 3, -21, 12, -40, -5, 6, 37, 17, 33, 34, -41, -22, 0, 22, -42, 14, -50, 5, 18, -20, 9, -14, -43, 3, 8, -12, 3, 22, -12, -9, 0, -6, -21, -19, -24, 48, 35, -1, -31, -12, -47, -42, -2, 1, 41, -33, -34, -41, 14, -35, -2, -48, -25, -30, -18, -58, -82, -32, -73, -10, -8, -5, -5, 8, 20, 10, -14, 23, 43, -25, -18, -2, 9, -14, 44, -49, -50, -22, -17, -39, -23, 16, -16, -28, -45, 15, -5, -22, 27, -4, -14, -14, 8, -51, -73, -44, 7, 7, 34, 24, 36, -14, -49, 4, 2, 19, -18, -6, -22, 6, 1, 0, 24, -11, -2, 11, 45, 49, 21, -28, 20, -1, 4, -6, 42, 2, 19, -51, -34, 5, 29, -59, -14, 0, 6, -39, -58, 26, -12, 38, 30, 47, 11, -16, 36, 9, 10, -25, -24, 5, 35, -44, -14, -36, 11, 30, -18, 21, -6, -37, 28, 37, -26, 10, 19, 7, -33, -2, 56, 39, -40, 40, 12, -40, 28, -27, 44, -59, 22, 15, 66, 6, 47, 62, -17, -14, 30, -31, 35, 4, -10, -26, 16, -25, 49, -16, 27, -51, -75, 4, 9, -4, -19, -12, 11, -34, -21, -21, 48, 32, -27, 21, 10, -32, 29, -21, -46, 13, 16, 1, 8, 18, -9, 21, 4, -4, -46, -45, -52, -36, -29, 5, 10, -5, 49, 2, -26, 42, 39, 37, 78, 64, -33, 33, 8, 21, -28, 2, -16, 39, 2, 23, 32, 24, 23, -8, 32, -4, -33, -40, -40, -74, 4, 15, -15, 34, -15, -9, 12, -11, 29, 42, -20, -46, 35, -15, -27, 49, -25, 29, 23, -45, -44, -15, -29, 10, 30, -29, 17, -41, 6, -23, 2, 37, 9, 56, -11, -17, -1, -28, 18, 27, -35, -12, 35, -51, -18, -20, -31, 21, 17, 8, -34, -40, -2, -24, 7, -12, 10, 11, -50, -11, 21, -25, 16, -14, 51, 0, 18, -25, -15, 28, 27, -41, -15, 26, 5, 7, -30, -20, 12, -32, -45, -18, 26, 5, 28, -30, -46, 0, 37, -11, 52, 21, 47, -7, 11, 50, 3, -2, 8, 30, -16, 2, 34, 31, -23, 10, 10, -42, -49, -17, 28, 47, -46, -61, -25, -44, -4, 29, 27, 15, 8, 26, 20, 30, -48, 4, 9, 14, 10, 1, -23, -73, -14, 4, 3, -47, 18, -21, 11, -12, -20, -46, -52, 18, 35, -4, -44, -5, -26, 24, -3, -14, 13, -54, -19, -67, 9, -5, 8, -72, -57, 6, 41, 12, -34, -37, 43, -3, 43, -21, 56, -58, 24, -29, -17, -46, 3, -72, 8, -31, 7, -72, -25, 7, -47, 24, -38, 38, 6, -7, -45, 20, 18, 7, 12, 48, 44, -12, -14, 2, -44, 12, -15, -52, -20, -24, -85, -8, 9, -21, -40, -52, -10, 45, 3, -17, 3, -3, 24, 16, 37, 29, -28, -20, -22, -11, -55, 9, -84, -2, -48, 12, -82, -56, 16, -38, -48, 3, 26, -18, 26, -15, 26, 21, -39, 11, 6, -15, 44, 22, 47, 22, -23, -63, 36, -60, 11, 25, 33, -51, -32, -70, -10, -13, 23, -62, -34, -64, -57, 32, -60, 21, -21, -29, -23, 7, 26, 8, -8, -10, 13, 3, 21, -37, -19, 1, 14, 12, 10, -24, 30, 5, -33, -5, -42, 9, 29, -51, 10, 6, -20, 39, 39, 
  19, -10, 7, 19, -20, -28, 31, -31, -8, -40, 47, 13, -41, 48, 13, 4, -5, -9, -31, 14, 19, -4, -7, 5, 51, -18, 46, -36, -23, 23, 21, 44, -28, -50, -23, 38, -51, 35, -24, 49, -4, 38, -31, -40, -19, -20, -28, 50, -47, 5, 50, 19, 46, -1, -19, 24, 8, -51, 34, -51, 2, -49, -25, 16, -51, 34, -37, -27, -15, 21, 6, 33, 21, -18, 30, 20, -8, 47, 7, -17, 4, 43, -14, 3, -5, 50, -1, 35, 44, 10, -24, 6, -36, -8, 40, -24, -22, 48, -40, 37, 18, 14, -3, -28, 32, 47, -36, -20, 2, -33, -9, 10, -40, 45, 47, 10, 25, 14, -54, 38, -36, 41, -49, -41, -18, -28, -35, 41, -44, 22, -21, 27, 20, -46, -28, 10, 23, 32, -25, 27, -9, 23, 1, 19, -19, 30, 45, 22, 27, -25, -22, -32, 32, -15, 30, 33, -56, -40, 44, -37, -2, 47, -49, -25, -16, -21, 37, 3, -4, -17, 5, -2, -5, 44, 50, 31, 45, -13, -1, 29, 20, 27, -8, 11, -48, -30, 1, 43, 38, 15, 42, -32, 47, 20, -2, -8, -21, 5, 49, -47, 18, -22, 34, -26, 40, 40, -15, 6, 13, -34, -37, -54, 43, 45, -46, -33, 16, -46, -56, -34, 30, -52, 25, 31, 38, -9, -49, -15, 29, -9, -14, -41, 14, -4, 29, -38, -56, 14, -37, -18, 40, 20, 6, 13, -13, -40, 0, 26, 44, 13, 13, 24, -41, 8, 9, -39, 51, -15, 34, 17, -45, -47, 10, -37, -26, 31, 37, -6, -49, -52, -22, 31, -30, 33, -22, 0, 34, 18, -24, 20, -42, -49, 48, -40, 42, -15, -17, 12, 28, -35, -28, 40, 31, -30, -38, -8, -23, -1, 31, 4, -16, 16, -5, -35, 8, -8, -40, 42, 6, 49, -19, -31, -14, 22, 3, 42, -27, -30, -38, 34, 22, -49, -18, -3, -29, -10, -25, -42, -11, 33, 15, 22, -23, 4, 32, 5, 45, -1, -19, -51, -32, -11, 34, 17, 5, 31, -36, -34, -23, -6, 17, -49, -53, 23, -7, 1, 38, -24, -28, -21, 42, -27, 45, 15, 27, -22, 0, 32, 15, -32, -26, -40, -17, -34, 16, 10, 1, -26, 44, -3, 41, 9, 45, -40, 32, -39, 8, 30, 6, -41, -26, -48, 33, -1, -40, 41, 40, -9, 33, 2, -33, -53, 4, 13, -30, 23, -38, -38, 45, -14, -31, 1, 34, -55, 27, -19, 35, 9, 19, 0, 22, 3, -46, -16, -18, 3, 33, -47, 8, -41, 6, 20, 47, 33, -39, 34, 6, -43, 1, -9, 38, -45, 25, -34, -7, -2, -27, -35, 2, -41, 24, 33, 11, -52, 43, -5, 35, -1, 35, -24, 23, -32, -49, -9, -40, -42, -11, -40, -17, 38, -2, -49, -44, 38, -42, -20, 1, -43, -36, 40, -43, -56, 9, 35, -37, -19, -7, -8, 8, 20, -39, -47, 6, -51, -30, 3, 35, -36, -31, -2, -42, 16, -27, 48, -24, 4, -40, 29, -23, 27, 22, -30, -36, -38, -56, 24, -14, 25, 5, -43, -42, -6, -36, 39, -16, -19, 22, -25, 42, 32, -36, -4, 27, 35, 8, -50, 1, 42, -22, 34, -46, -27, -35, 30, -58, 27, 17, -29, -43, 26, -54, -28, -4, -47, -51, 37, 21, 38, 4, 32, -43, 37, -45, -36, -19, -16, -16, -36, -19, 45, -37, -25, -38, 28, -20, -3, -13, 23, -7, 22, -2, 29, 13, 20, 1, -14, 23, -14, 19, 9, 33, 8, -47, 13, 40, 31, -8, -5, 20, -9, -15, 23, -26, -6, 23, 36, -49, 27, -15, -24, -27, -15, -46, -51, 49, 28, 18, -49, 14, -31, 32, 41, 18, 32, 23, 24, 44, -42, 33, -44, -6, -13, 25, 45, -4, -44, 3, 2, -46, 9, -9, 51, 26, -28, -22, -39, 46, 4, 9, 23, 29, -24, 32, -45, -55, -27, -40, -53, -28, 8, 21, 2, -44, -13, 34, -13, 1, -10, 6, 42, 28, -24, 39, 4, 47, -12, -48, -15, 49, 6, -12, -34, 0, -4, 1, 14, -51, 10, 33, -54, 6, 44, 1, -22, -32, -31, 30, -1, -42, -33, 29, 1, 34, 50, -4, 44, 36, -25, -50, 34, -41, 29, -42, -37, -5, -28, -25, 11, -9, -35, 12, 23, -39, 37, -39, -21, 16, 36, 13, 33, -10, -5, 11, 23, 23, 17, 3, -26, -45, -24, 15, 51, 40, -1, -28, -4, -5, 47, -40, -17, -12, -11, 26, -1, -15, 25, 47, -41, -15, 27, 22, 45, 7, 20, -32, -11, 43, -32, 18, -32, 39, 8, -3, -19, -9, -11, 32, -12, -18, 45, 0, 0, 3, 10, 
  -8, -35, 24, -38, 3, -39, -13, -37, 19, 18, -3, -39, -10, 45, 12, 27, -23, -37, -47, -17, 23, -13, -37, 37, -26, 7, -21, 17, 12, 1, -35, -37, 45, 24, -10, 48, 25, 48, -20, -5, 7, -21, -76, -43, 0, -43, 29, -1, 9, 39, -29, -49, 40, 43, -2, -47, 4, 22, -14, -18, 38, 65, -3, -30, -36, 28, 18, -83, -50, -55, -62, -61, 29, -11, -8, 8, -28, -6, -19, -15, 12, 49, 9, -9, 50, -1, -43, 41, 4, 34, -51, 30, -43, -59, -77, -13, -63, -5, -50, -10, -63, -47, -40, 17, -8, -49, -52, 24, -16, 35, -16, -4, -27, -22, 33, 44, 58, 22, -37, 19, -5, -67, 10, 64, -74, -24, 7, -28, 9, -34, -15, -11, -67, 13, -10, -20, 43, 14, 33, -6, -36, 45, -41, -47, 1, -57, -27, 23, -37, -42, 9, -23, -41, -27, -25, -25, -42, 0, -39, -44, 17, 4, 4, 24, 36, 23, 32, -40, 4, -25, -23, 8, -24, 4, 19, 41, 4, -38, -9, -27, 36, -15, -11, 66, -12, 22, -13, -3, 2, -16, -39, 6, 6, 31, -3, 8, -2, -43, 34, 31, -23, 9, -35, 29, -39, -23, -10, 11, -16, -6, 36, -31, 34, 37, 31, -20, 6, -14, -15, -11, -50, -15, -15, -43, -45, 8, 42, -38, -4, -22, -40, 10, -15, 40, -26, 10, -28, 21, 7, -4, -1, 21, -23, -15, 5, -6, -26, -29, -24, -12, -30, -20, -35, 16, -22, -51, 23, -31, 20, -36, -43, -39, -36, 43, 25, -33, 25, 7, -18, -36, -12, -51, -54, -28, 16, -20, 7, -41, -34, -38, 48, 36, -11, -39, 25, 16, 6, 25, -5, 5, 36, -13, -18, 11, -3, -28, 47, 0, 39, 34, -22, 38, -27, -41, -31, 37, 32, 19, -3, -54, 9, 41, 31, -1, 31, -1, 3, 54, 2, 3, 40, -39, -6, -26, -7, 45, -8, 49, 10, -48, -3, 43, 15, -29, -13, -26, -38, -37, -12, 25, 72, -12, -4, 72, 37, 39, -19, -3, -18, -10, 24, 25, 11, 1, 73, -18, 42, -21, 22, 18, -16, 9, -15, 29, -6, -26, -15, -78, 8, 32, 39, -12, 16, -9, 45, -20, -24, -12, -3, 42, 5, 45, -2, -4, 22, -40, -54, -59, -39, 7, 0, -35, 15, 28, -64, -24, -20, -29, 21, 8, -22, -18, -8, 32, 17, 13, 0, 34, 13, -3, 13, 55, 23, -16, -3, -64, -71, -68, -19, -5, 43, -13, 8, -17, 18, 29, -26, 48, 37, 48, 17, -8, -28, -29, -38, 37, 16, 53, 51, -35, -5, 6, 22, -16, -13, -54, 9, 10, -14, -64, 49, -61, -51, 10, 11, 30, 0, -45, 8, -21, 63, -27, -22, 48, -4, 50, 38, -33, -34, -3, -41, -48, -8, 2, 2, -4, 18, 41, -8, -65, -32, -15, -52, 40, 7, 54, 1, -3, -2, 18, -28, 37, 19, -23, -34, 33, 29, -12, 23, -62, -82, -19, 69, 36, 27, -22, -36, -2, -28, -57, -14, 15, 38, -34, 14, -21, -37, -4, 21, -2, 40, -59, -16, -28, -27, -54, 13, -15, -27, 36, -41, -22, 16, -29, -47, -73, 38, -21, 26, -64, -24, -25, -41, 6, -1, -8, -8, -26, -12, -36, 15, 14, -14, -33, -10, -28, -49, -27, 9, -50, 44, -27, -24, 9, 37, 18, -24, -63, -22, -54, 5, -47, -26, -34, -20, -24, 5, -11, -29, -74, 16, -19, -7, 22, -45, 4, -16, -28, 3, 51, -8, -50, 6, -18, -67, -44, 26, 4, 0, -44, -2, 23, 12, -14, 17, -15, -36, 5, 20, 26, 11, 37, -35, 36, 41, 16, 26, -41, -49, -59, 3, -1, 10, -57, -36, -32, 23, -1, -1, -27, -14, -40, -21, 4, -47, -53, -17, -45, -26, 0, 37, 59, -43, 20, 46, -21, 27, 9, -11, 16, -45, -31, -4, 20, -20, -1, -62, -3, -28, 11, -65, -2, -14, 30, -25, -45, 75, 40, 41, 14, -7, -33, 29, -1, -2, 27, -28, 1, 34, -39, 12, -62, -48, 20, -44, 2, -47, -16, -11, 13, 12, 23, 92, -23, 127, 92, -8, -21, 9, 15, -34, 39, -50, 15, -28, 5, -18, 24, 31, -3, 23, -15, 26, -29, 39, 29, 25, 43, -7, 22, 17, 104, 47, 71, 78, 42, 10, 31, 47, -43, 2, 1, -1, -35, 36, -24, 3, 18, 45, 46, 20, 25, 28, -70, 30, 28, 40, 89, -3, 70, 10, 84, 95, 7, 15, 4, 38, 4, -37, -47, -21, -18, 4, 32, 2, -49, -47, -13, -3, 41, -80, -23, 12, 60, 38, -55, 0, 74, -26, -48, -11, -41, -42, -8, 
  -37, 10, -9, -21, 32, 46, -49, -46, -19, -44, -17, -45, -12, 31, 17, -10, 27, -8, 30, 11, -37, 42, -51, -19, 0, 26, 0, -10, 15, -7, -26, 9, 42, 31, -50, 13, -29, -38, 29, 10, 38, -18, 8, -25, -32, -3, 46, 13, -22, -21, 49, 44, 19, -22, -45, -28, 8, 38, -43, -44, 7, -5, 29, 29, -17, -11, 7, 10, -19, -35, -9, 29, 35, -41, -46, 44, -23, 1, -21, 33, -28, -33, 11, 43, 51, 34, -1, -29, 26, -11, -54, -51, -50, 19, 9, 43, -17, 42, 36, 36, 28, -14, -43, -66, 5, 39, 39, 12, 6, 16, 45, 39, -37, 9, 32, 6, 18, -20, 22, 42, -22, 25, -27, -30, -16, -20, 52, 15, -47, 39, -33, 3, 50, -19, 18, 18, 33, 15, -4, -15, 41, 45, 11, 9, 4, 5, -10, -2, 4, 37, -40, -36, 28, -21, -20, -25, -35, 15, 16, -37, 0, 7, -28, 2, -15, 12, 34, 12, 37, -37, 2, 41, 43, 23, 41, 34, 22, 19, 24, -27, 26, 38, -28, -18, 41, -46, 34, 11, -4, 32, 22, -6, -20, 26, 58, 14, 19, 9, 20, 15, 30, -41, -21, 27, -30, 21, 11, -21, 3, -21, 35, -6, 6, -2, -23, 36, -4, -2, 36, 49, -1, -18, 35, 6, 24, 28, 26, -27, -3, 8, 5, 39, -27, 17, 21, 15, 13, 1, -32, 30, -36, 14, -8, -38, 37, -24, 31, 54, 31, 79, 53, 35, 11, -11, 32, 28, 35, -32, 30, -48, -25, -3, -16, -13, 24, -15, -8, -17, 16, 21, 40, -26, 4, 16, -22, 5, -16, 35, 32, -30, -36, -17, -27, 43, 6, -13, 55, -41, 31, -19, -45, -22, -15, 42, 42, 6, -31, -3, -38, -8, 10, 2, -17, -5, -40, 80, -33, 42, -14, -41, -38, 32, -24, -17, 51, -51, -44, 24, 1, 20, 23, 7, 15, -44, -22, -37, 14, -1, -3, -92, -50, -60, -60, -47, -14, 45, -22, -33, 51, 25, -6, 12, 6, 14, 24, -28, 9, 30, -6, -9, 1, 41, 2, -3, -49, -45, -60, 1, -22, 17, -9, -32, 30, 5, 30, 1, -30, 8, 12, 12, -34, 32, -11, 45, -16, 20, 6, 17, 32, -48, 16, -13, 10, 24, -34, -51, 15, -64, -57, 27, -10, 48, 17, -25, -31, -48, 30, -46, 32, 23, 27, 30, 9, -6, 26, 10, 3, -2, 1, -32, -26, 36, 22, 11, 25, 35, 52, -45, -23, 28, 43, -11, 7, -9, -46, -51, -48, -57, -46, -55, 9, 22, -11, 1, 4, -46, -43, -3, 15, -25, -11, -18, -30, -23, 44, 14, -28, -7, 47, -22, 40, 47, -10, -5, -21, -61, -21, -46, 14, -26, -30, 46, -3, 15, -15, 45, -3, -5, -16, 12, -18, -35, -30, 29, 13, -41, 42, 40, -27, 65, 33, -20, 14, 6, -24, -101, -72, -58, -50, -27, -48, -2, -7, -19, -18, 37, -27, -1, -30, -5, 48, -5, 36, 42, 13, 16, -15, 55, -11, -37, -15, -1, -42, -63, -68, -44, -39, -44, -61, -37, 28, -13, 15, -23, 51, 24, -22, -5, 14, -32, -8, 37, -9, -28, 44, 11, 22, 41, 6, 36, 9, 31, 13, -15, 4, -59, 23, -40, -19, 0, 47, 18, 8, 34, 9, 23, 4, -7, -57, -30, 21, 47, -20, 56, 33, 64, -14, 20, -12, -24, 3, 10, 3, 8, 41, -3, -21, -37, 28, -23, 7, 36, 16, -19, 37, 10, -66, -21, 11, 25, -24, 85, 47, -31, -39, 27, 54, 41, 27, 37, 19, 16, -18, 37, -37, 20, -26, -23, 25, 23, 1, 20, 16, -8, -21, 25, -16, -39, 39, -22, -34, 38, -5, 30, -22, 6, 4, -28, -3, -6, 28, -31, 47, 19, 13, -48, -18, 24, 16, 9, -23, -6, -32, 9, -45, 16, -30, 35, -23, 8, 43, -25, 39, -17, 63, 31, 19, 40, 7, -27, 15, 26, -54, 10, 20, -22, -45, -53, -40, 0, -9, -16, -29, -33, -9, 14, 37, 5, 4, 7, -24, 34, -14, 18, -33, 31, 7, 5, 10, 0, 6, 37, -44, -37, 43, -54, 31, -17, 39, -21, 6, -44, -30, 11, 32, 44, 35, 48, -17, 42, -4, -31, 35, -31, -44, -27, -42, 35, -20, 24, 26, 12, -5, 11, 7, 38, 33, 18, 5, 45, 22, -27, 25, 45, -27, -34, -17, 26, -41, -7, 40, -3, -12, 55, -18, 23, 21, 38, -11, -41, -53, 10, -43, -1, -35, 22, 0, -31, -46, 32, -48, 1, 25, -26, -51, 23, 24, 33, -1, -29, 35, 27, 0, -18, -44, -25, -8, -22, -11, 3, -11, -42, -16, -35, 
  -27, 12, -23, -1, -35, -21, -19, 46, -13, -16, 5, 49, 11, 36, -38, -6, -24, 16, 42, 46, 24, 43, -48, -6, 29, 45, 21, -9, -20, 37, -1, -36, -8, -47, 18, -2, 13, -23, -42, 9, 5, 34, 45, -20, 23, -13, 28, -27, 44, -5, -4, -32, 31, -46, 36, 24, 19, -6, -28, -47, -34, 35, 49, 26, 34, -41, -47, -27, -16, 6, -38, 35, -18, 23, 28, 3, -24, 24, -6, -51, 31, -22, -25, 44, 17, 40, 45, 36, 32, 17, -45, -49, -11, -5, 14, -30, -38, -19, 16, -27, -19, -28, -17, -33, -17, -30, 20, 33, 46, -42, 5, 9, 5, 20, 50, 31, 33, -24, -11, 18, 45, -30, -15, 0, -20, 14, 8, 1, -45, 17, 1, -17, -47, 24, 42, -26, -10, 36, 4, -18, -20, -37, -15, 36, -11, -29, 6, 50, -24, 10, 26, -52, 0, -7, -21, -41, -36, 14, -37, -15, 23, 39, -36, -4, -52, -35, 20, -21, -49, 50, -9, 17, 43, 24, -15, 18, -27, 25, -5, 28, 17, -27, -1, -37, 12, -7, 3, -2, -37, 4, 5, -20, -1, -4, 29, -11, 0, -3, 79, 70, 31, 25, 20, 60, 13, 26, 1, -3, 20, -22, 2, -45, 58, -37, 13, -23, 13, -11, 15, 45, 49, 52, 10, 42, -9, 60, 18, 33, 63, -10, 14, 27, -11, 33, 4, 36, 11, 31, 48, -11, 4, 43, 14, 9, 21, 16, 15, -3, 59, 2, 1, 76, 14, -10, 7, 62, 30, 8, 53, 3, 3, 42, 0, 33, -39, 41, 33, 19, 12, 7, 29, 29, -28, 20, -3, 6, -27, 18, -8, -16, 2, -32, 47, 37, 4, 22, 16, 24, -40, 21, -24, 27, -23, -11, 15, 27, 74, -16, 39, -6, 4, 23, 0, 5, 23, -25, 9, 29, -8, 12, 34, -19, 52, 34, -18, -3, -12, 26, 0, 15, 13, -26, 3, 12, -9, 44, -2, 21, 25, -61, 5, 7, -31, 10, 32, 5, -41, 51, 20, 2, -3, -54, -6, 23, -40, 1, 0, -4, -34, -17, -35, -38, -11, 10, 5, -61, 5, -70, -5, 28, 45, 4, -51, -51, -18, 70, 13, -12, -32, -6, 47, -4, 44, 7, -11, -10, -35, -91, -11, 14, -31, -47, -21, 13, 32, -39, 14, -7, 10, -56, -47, 38, 38, -21, 33, -5, 29, -2, 43, -2, -13, -26, -30, -28, -69, -34, -8, -35, 18, -15, -10, 30, -28, 13, 32, -38, -18, 38, 24, -46, -36, 49, -25, -53, -17, 0, 29, -51, 11, -17, 5, -19, -61, -12, -4, 6, 40, 24, 7, -12, 26, 16, -27, -9, -16, -13, 59, 18, 47, 17, 43, 18, 36, -15, -45, -25, -61, -18, 5, -77, -4, -24, -38, 22, 40, 19, 4, -22, 8, 20, -30, -29, -8, 37, 18, -33, 11, 6, 33, -12, 27, 31, 1, 28, 18, 26, -10, -53, -21, 33, -34, 27, -54, 34, -31, 33, -2, -12, 11, 28, -9, -12, 34, 50, -44, 35, -2, 2, 24, 26, -45, 11, -5, -24, -28, -30, 32, 6, -14, 20, -11, -29, -2, -19, -42, -75, -54, -46, 2, -48, -35, 10, 30, 2, -52, 21, 25, 13, -56, -7, 27, -47, -22, -35, -1, 2, -22, -4, -33, -12, 8, 33, -8, -26, -6, -21, -58, -5, -21, -10, -13, 6, 0, 1, -53, -21, -2, 26, 29, -27, -5, 12, 6, 63, -28, 11, 16, -12, -26, -34, -42, 9, -58, 32, -50, 20, -9, 20, -21, 11, -27, 26, 26, -66, -40, -42, -44, -24, -32, 6, -6, 25, -22, -14, -19, -53, -55, -20, -28, -2, 37, 3, 24, -30, -19, 1, -28, 34, 50, 40, 14, -65, -1, 27, 22, 36, 23, -29, -55, 22, -38, 27, -55, -5, -25, -49, 12, -51, 7, 34, -35, 15, 9, -4, 0, 6, -44, -36, -41, -8, -6, 23, 40, -3, -34, 10, -39, 23, 35, 1, -33, -20, 1, -14, -23, -43, 20, 25, 33, -27, -38, 33, 12, -35, -12, 15, -49, -18, 47, -5, 6, 15, -4, -4, 1, -11, -31, 17, 11, -6, 22, -51, -11, 23, -61, -62, -12, -23, 48, 33, -7, 34, -47, 27, 6, 27, 17, 18, -12, -14, 12, -7, 37, 25, -4, 35, 16, -2, 35, 43, 56, 16, -2, -41, 34, 0, 33, 17, 8, 9, -29, -24, -14, -8, 22, -27, -44, -2, -18, 1, -62, -41, 32, -54, 35, 63, 22, -1, 19, -46, -37, 44, -22, 7, 8, 27, 27, 25, 17, -24, -47, 33, 10, 56, 17, 14, -9, 58, 26, -27, 62, 39, 55, -21, 68, 14, 0, 45, -39, 17, -22, 21, 1, -40, 
  25, -4, -20, -29, -4, 25, -29, 31, 22, -33, 11, 6, 47, 25, -41, -43, 49, -43, 36, 19, -25, 25, -43, -6, 21, -17, -14, -29, 49, -22, 35, 28, -3, 29, 39, 24, -13, 2, 30, -2, -5, 38, 10, -50, -21, 13, -36, -6, -48, 27, -16, -30, 40, -14, -5, -8, 1, 21, 19, 22, -37, -33, -39, 6, -43, -8, -48, -3, -66, -14, 20, -14, -6, 3, 53, -17, -28, -1, -4, 3, -14, -38, 5, -24, 23, -7, 39, -43, 19, 16, -38, -22, -20, -45, -56, -2, -42, 24, -68, -4, 7, 43, -18, -27, 38, 36, -23, -17, 42, 12, 24, -12, -19, -22, -3, -18, -19, -14, 35, 13, -32, -25, -20, -45, 19, -43, 32, -30, 28, 3, 13, 0, 37, 23, -23, -93, -3, 13, -39, -33, 2, 21, 20, 29, 23, -19, -1, -30, -7, -37, -22, 37, -16, 11, -5, 26, -30, 23, 28, -41, -29, 14, 8, 12, -7, 37, 13, 21, 36, 5, 38, -2, 33, 31, 55, -20, 72, 30, -31, -12, 12, -19, -13, 8, -33, -10, -37, 15, -40, -13, 14, -37, 35, 17, -5, 66, -9, 50, 3, -41, 2, 41, -33, -34, -11, -17, -32, -27, 11, -45, 19, -28, -2, 16, -2, 0, -5, 0, 26, 14, -15, 15, 6, 18, 16, 48, 38, -1, 18, 30, -13, -24, 20, 45, -25, -12, 21, -26, 8, -33, -16, 2, -18, 0, 32, -7, 18, -13, -81, 20, 34, 56, -3, 31, -17, 49, 15, -17, 0, -9, -6, -24, 48, -9, -27, 1, -2, -4, -59, -35, 0, 32, 13, 32, 17, -53, -58, -70, 50, 39, 41, 5, -49, -4, 37, -6, -59, 14, 13, 61, -24, 56, 37, 6, -49, -50, 21, -23, 19, 12, -40, 39, 33, -38, -30, -9, -26, -25, 31, -24, -46, -13, 14, -46, 20, -41, -3, 10, 55, -41, 41, -12, -45, 56, -1, 4, 8, 8, 70, 9, -15, -35, -35, -61, -33, 10, -43, 28, 29, 4, -3, 21, 10, 16, -19, 19, 29, -3, -29, -6, 35, 14, 5, -18, 30, 37, -12, 46, -16, -8, 20, -8, -67, -11, -2, -14, 46, -9, 10, 23, -19, 46, 7, 16, -39, -15, 55, 19, -3, -9, 39, 1, -21, -21, -7, -49, -24, 9, 14, -26, -20, 46, -19, -25, -7, 37, -26, -18, 29, 11, -26, -55, 11, -13, -9, 37, 55, -6, 58, -18, -48, 0, -19, -40, 0, -24, 37, -27, -21, -47, -24, -42, 23, -13, -5, 37, 14, -76, -57, -11, -35, 8, -17, 10, -20, -16, 30, -30, 4, -3, -5, 31, 28, 25, 24, 36, 49, -12, -28, -16, 43, 34, -29, -64, -40, -10, 17, 0, -39, 37, 26, 29, 33, -14, 7, -29, -36, -40, 23, -48, -55, 33, -17, 21, 44, -39, -38, -36, -12, -54, -12, -54, -71, 36, 2, 23, 52, 3, 10, -6, -4, -52, 27, 18, 0, 21, -55, -5, -56, 17, -6, -21, 32, 30, -3, 47, 14, -20, -18, -33, -93, -38, 32, -21, -6, 41, 7, 5, -4, -9, -30, -53, -21, 25, -7, -14, 38, -61, -51, -31, -4, 50, 18, -7, -11, -13, -23, -58, -45, -8, 32, 14, 53, 28, 27, -48, -1, -4, 22, 7, -19, -43, 37, -5, -35, -7, -26, -16, 1, 37, 34, -20, 25, -21, -46, -6, 0, -1, 12, -11, -22, -15, -3, -51, -13, -13, -20, 22, -15, 24, -17, 15, -46, -43, 38, 21, -7, -26, -51, 13, 46, -56, -49, 15, 32, 16, 15, -37, 3, 10, -19, 2, -10, -18, -21, 36, -17, -5, -9, 7, -61, -17, 21, -11, 11, 10, -23, 24, 19, 28, 15, -44, -24, -9, -30, 17, -6, -26, 36, -12, 6, 11, -50, -50, -22, 19, -22, 32, -56, 29, 10, -43, -41, 47, -16, -33, 40, 1, -56, -46, -24, -57, -26, -11, 18, 10, 0, 4, 15, 22, 33, 51, -44, 4, 43, 39, -5, -67, -21, -16, 41, 22, 34, -29, 40, -62, -1, -24, -41, -37, -3, -46, 24, 1, 23, 12, -1, -39, -5, 37, 20, -5, 16, 13, -3, 6, 38, 30, 16, -20, 49, -42, -31, -45, 17, -9, 12, 17, -82, -77, -72, -42, -49, -8, -8, 1, 5, -2, -17, -52, -40, 32, -17, -27, -2, -12, 6, -11, -39, 34, 12, -30, -14, 10, -47, -47, -5, -13, 20, 3, -79, -11, -81, -7, 12, -30, -58, -45, -63, -5, 12, 2, 41, 32, 5, -33, -46, -3, 42, 22, -49, 9, 15, -1, 38, -39, 25, 14, -12, -61, -52, 19, 32, -17, -11, -5, 7, 25, 7, -48, -10, 14, 15, 16, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 16, 784, } };
const TfArray<1, float> quant1_scale = { 1, { 0.0016892950516194105, } };
const TfArray<1, int> quant1_zero = { 1, { 0, } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[16] = { 
    -17, -15, -15, -20, -9, -22, -11, -13, -20, -2, 
    -21, -8, -10, -13, -5, -78, 
};
const TfArray<1, int> tensor_dimension2 = { 1, { 16, } };
const TfArray<1, float> quant2_scale = { 1, { 0.0016892950516194105, } };
const TfArray<1, int> quant2_zero = { 1, { 0, } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[16*16] = { 
  62, -22, 26, 28, 32, 27, 73, -95, -26, -98, -66, -57, -20, 12, 61, 47, 
  -70, 28, -127, 50, 84, -73, -94, -72, -82, 75, -107, 97, -63, -20, -32, 26, 
  -34, 66, 23, -103, 69, 34, -4, 14, -7, -75, 89, 84, -54, 72, -11, -48, 
  56, 66, -103, 72, -101, 68, 69, 54, 49, -43, -58, 48, -52, -7, 13, -11, 
  -25, -69, 32, -97, -37, 82, -38, -97, -68, -41, -84, -84, 20, 97, 60, -64, 
  111, 85, -45, -64, 69, -52, -80, -3, 24, 88, -46, 59, 30, -41, 12, -50, 
  81, 67, -37, -22, 42, 93, 25, 98, 94, 12, -60, 0, -33, -59, -95, 11, 
  77, -95, 66, -69, -51, 50, 14, -19, -85, -1, 23, 108, 78, -68, -95, 100, 
  27, -73, 17, 44, 53, -34, -4, -99, 42, 13, 9, -109, 30, -32, 54, 60, 
  73, -77, 1, -60, 0, -18, 62, -39, -44, -58, -83, 52, -15, 108, -60, -46, 
  -46, 80, -14, -58, -90, -4, -11, -88, 62, 47, -17, 1, 2, 31, -94, 44, 
  -53, 76, -69, -104, -45, 49, -111, 91, -35, 3, -16, -49, 53, -13, 81, -13, 
  32, -90, 10, 61, 57, -110, -99, 52, 29, -46, 37, -11, -92, 102, 87, -20, 
  -60, -18, 93, -52, 91, 55, 84, -30, -53, 80, -31, 53, 1, -28, -99, 0, 
  -105, -49, -57, -65, 51, 94, 94, 94, 13, -35, 64, -5, -27, 50, -9, 10, 
  17, -19, 68, -21, 37, 86, 88, 70, -101, 0, -85, 69, 45, 22, -35, -76, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 16, 16, } };
const TfArray<1, float> quant3_scale = { 1, { 0.0039675491861999035, } };
const TfArray<1, int> quant3_zero = { 1, { 0, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[16] = { 
    -25, 90, 54, -4, -1, -22, -8, 1, -5, 95, 
    -21, 0, -6, 0, -30, -17, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 16, } };
const TfArray<1, float> quant4_scale = { 1, { 0.0070356712676584721, } };
const TfArray<1, int> quant4_zero = { 1, { 0, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[10*16] = { 
  -35, -63, 51, -79, -65, 28, 78, -91, -86, -59, -69, 18, -27, -37, -90, -20, 
  -16, -42, -89, -42, -49, -8, 61, 9, -14, 28, 45, -77, 48, 37, 52, -60, 
  -51, 4, -19, -44, 25, 15, -20, 25, -21, -73, 23, -17, 20, 52, 36, -49, 
  5, 92, -63, 75, 26, -52, -40, -30, -69, 94, -2, -7, -16, 44, 82, 6, 
  27, 54, -45, -81, -5, -63, -17, 60, -30, 24, -78, 7, -83, 59, -12, -35, 
  -85, -4, -34, 31, 19, -18, -26, 51, -39, 108, 2, -12, 51, -54, -57, -74, 
  -70, -7, 25, -53, 2, -56, 16, -35, -11, -52, -2, -21, 32, 47, 92, -12, 
  66, 83, -50, -46, -62, -38, -60, -36, 38, -127, -79, 58, -76, 74, 52, 17, 
  -23, 80, 3, -56, -84, -95, -39, -15, 69, 64, 55, -39, 31, -85, -2, 61, 
  -67, -96, -100, 85, 23, 18, -59, 23, 14, -79, 71, -26, -7, -91, -69, -6, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10, 16, } };
const TfArray<1, float> quant5_scale = { 1, { 0.0052004586905241013, } };
const TfArray<1, int> quant5_zero = { 1, { 0, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[10] = { 
    -162, -223, -56, 89, -106, 135, -65, -173, 269, -75, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 10, } };
const TfArray<1, float> quant6_scale = { 1, { 0.0031258435919880867, } };
const TfArray<1, int> quant6_zero = { 1, { 0, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1, 16, } };
const TfArray<1, float> quant7_scale = { 1, { 1.7733041048049927, } };
const TfArray<1, int> quant7_zero = { 1, { -128, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1, 16, } };
const TfArray<1, float> quant8_scale = { 1, { 0.60107076168060303, } };
const TfArray<1, int> quant8_zero = { 1, { -128, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1, 10, } };
const TfArray<1, float> quant9_scale = { 1, { 1.1026278734207153, } };
const TfArray<1, int> quant9_zero = { 1, { 33, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1, 10, } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, 0, 0 };
const TfArray<3, int> inputs0 = { 3, { 0, 1, 2, } };
const TfArray<1, int> outputs0 = { 1, { 7, } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, 0, 0 };
const TfArray<3, int> inputs1 = { 3, { 7, 3, 4, } };
const TfArray<1, int> outputs1 = { 1, { 8, } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, 0, 0 };
const TfArray<3, int> inputs2 = { 3, { 8, 5, 6, } };
const TfArray<1, int> outputs2 = { 1, { 9, } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9, } };
const TfArray<1, int> outputs3 = { 1, { 10, } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 12544, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1)) },},
  { kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2)) },},
  { kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3)) },},
  { kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4)) },},
  { kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5)) },},
  { kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6)) },},
  { kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8)) },},
  { kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10)) },},
};
const NodeInfo_t nodeData[kOpNodesCount] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};


  // Used by RequestScratchBufferInArena to generate buffer index
  // for each request.  Reset for each node from _init to allow
  // for nodes omitting calls as scratch buffer indexes is in pre-computed OpData
  int next_scratch_buffer_idx;
  const uint8_t node_scratch_buffer_requests[] = {
0, 0, 0, 0, 
};  

const size_t scratchbuf_offsets[] = {
0 // dummy to avoid empty vector
};  

void *AllocatePersistentBuffer(struct TfLiteContext* ignore,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *ignore,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

TfLiteStatus RequestScratchBufferInArena(TfLiteContext *ignored,
                                                size_t bytes_ignored,
                                                int *buffer_idx) {
  *buffer_idx = next_scratch_buffer_idx;
  ++next_scratch_buffer_idx;
  return kTfLiteOk;
}

void* GetScratchBuffer(struct TfLiteContext *ignore, int buffer_idx) {
  return tensor_arena + scratchbuf_offsets[buffer_idx];
}

} // namespace
#if TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
namespace tflite {
namespace ops {
namespace micro {

namespace add {

OpData TEST_MODEL_op_user_data[] = {
};
} // namespace add

namespace conv {

OpData TEST_MODEL_op_user_data[] = {
};
} // namespace conv

namespace depthwise_conv {

OpData TEST_MODEL_op_user_data[] = {
};
} // namespace depthwise_conv

namespace fully_connected {

OpData TEST_MODEL_op_user_data[] = {
  {{2094846053, -10, -128, 127, 0, -128, 0, -128}, -1, nullptr, -1, -1, EvalQuantizedInt8}, 
  {{1608754506, -6, -128, 127, 0, -128, 0, -128}, -1, nullptr, -1, -1, EvalQuantizedInt8}, 
  {{1558504668, -8, -128, 127, 0, -128, 0, 33}, -1, nullptr, -1, -1, EvalQuantizedInt8}
};
} // namespace fully_connected

namespace mul {

OpData TEST_MODEL_op_user_data[] = {
};
} // namespace mul

namespace pooling {

OpData TEST_MODEL_op_user_data[] = {
};
} // namespace pooling

namespace softmax {

OpData TEST_MODEL_op_user_data[] = {
  {{0.000000, 1183937664, 27, 0, 0, -15, 0, 0.000000, nullptr, nullptr, nullptr, nullptr, nullptr}, SoftmaxQuantizedInt8}
};
} // namespace softmax

namespace svdf {

OpData TEST_MODEL_op_user_data[] = {
};
} // namespace svdf

} // namespace micro
} // namespace ops

namespace micro {
namespace TEST_MODEL_model {
void *precomputed_op_user_data[] = {
  &tflite::ops::micro::fully_connected::TEST_MODEL_op_user_data[0],
  &tflite::ops::micro::fully_connected::TEST_MODEL_op_user_data[1],
  &tflite::ops::micro::fully_connected::TEST_MODEL_op_user_data[2],
  &tflite::ops::micro::softmax::TEST_MODEL_op_user_data[0],
};

} // namespace TEST_MODEL_model
} // namespace micro
} // namespace tflite
#endif  // TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA

class TEST_MODEL_PreinterpretedMicroContext : public tflite::MicroContext {
 public:
   TEST_MODEL_PreinterpretedMicroContext() : 
    tflite::MicroContext(nullptr, nullptr, nullptr) {}

  // Allocate persistent buffer which has the same life time as the interpreter.
  // Returns nullptr on failure.
  // The memory is allocated from the tail.
  // This method is only available in Init or Prepare stage.
  // Virtual so that it can be faked for kernel tests.
  virtual void* AllocatePersistentBuffer(size_t bytes) {
    return ::AllocatePersistentBuffer(nullptr, bytes);
  }

  // Request a scratch buffer in the arena through static memory planning.
  // This method is only available in Prepare stage and the buffer is allocated
  // by the interpreter between Prepare and Eval stage. In Eval stage,
  // GetScratchBuffer API can be used to fetch the address.
  // Virtual so that it can be faked for kernel tests.
  virtual TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                                   int* buffer_idx) {
    return ::RequestScratchBufferInArena(nullptr, bytes, buffer_idx);
  }

  // Get the scratch buffer pointer.
  // This method is only available in Eval stage.
  // Virtual so that it can be faked for kernel tests.
  virtual void* GetScratchBuffer(int buffer_idx) {
    return ::GetScratchBuffer(nullptr, buffer_idx);
  }

  // Returns a temporary TfLiteTensor struct for a given index.
  // Virtual so that it can be faked for kernel tests.
  virtual TfLiteTensor* AllocateTempTfLiteTensor(int tensor_idx) {
    return tensor_idx >= 0 ? &tflTensors[tensor_idx] : nullptr;
  }

  // Returns a temporary TfLiteTensor struct for the specified input tensor of a
  // given mode. This is the recommended API over the deprecated
  // GetInput/GetInputSafe to get a temp input tensor. The returned tensor shall
  // be freed via calling DeallocateTempTfLiteTensor.
  virtual TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node,
                                                int index) {
    return AllocateTempTfLiteTensor(node->inputs->data[index]);
  }

  // Returns a temporary TfLiteTensor struct for the specified output tensor of
  // a given mode. This is the recommended API over the deprecated
  // GetOutput/GetOutputSafe to get a temp output tensor. The returned tensor
  // shall be freed via calling DeallocateTempTfLiteTensor.
  virtual TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node,
                                                 int index) {
    return AllocateTempTfLiteTensor(node->outputs->data[index]);
  }

  // Deallocates a temp TfLiteTensor.
  // Virtual so that it can be faked for kernel tests.
  virtual void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    // No-op
  }

  // Returns a TfLiteEvalTensor struct for a given index.
  // Virtual so that it can be faked for kernel tests.
  virtual TfLiteEvalTensor* GetEvalTensor(int tensor_idx) {
    return ::GetEvalTensor(nullptr, tensor_idx);
  }


  // Does not take ownership of the pointer and the pointer must refer to valid
  // an object that outlive this class instance.
  // This can only be called once to set one external context.
  TfLiteStatus set_external_context(void* external_context_payload);

  void* external_context() { return external_context_payload_; }
protected:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

extern "C" TfLiteStatus TEST_MODEL_init() {
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;

  static TEST_MODEL_PreinterpretedMicroContext u_ctx;
  ctx.impl_ = static_cast<void *>(&u_ctx);

  TfLiteIntArray dimsEmptyTensor = {0};
  tflTensors[-1].dims = &dimsEmptyTensor;
  tflTensors[-1].data.raw = nullptr;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = false;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    } else if (tflTensors[i].quantization.type == kTfLitePackedAffineQuantization) {
      TfLitePackedAffineQuantization const* quant = (TfLitePackedAffineQuantization const*)(tensorData[i].quantization.params);
      tflTensors[i].params.scale = quant->affine.scale->data[0];
      tflTensors[i].params.zero_point = quant->affine.zero_point->data[0];
    }
  }
  registrations[OP_FULLY_CONNECTED] = tflite::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = tflite::Register_SOFTMAX();


#if TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
tflite::micro::resetOfflineOpUserData( tflite::micro::TEST_MODEL_model::precomputed_op_user_data);
#endif  // TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
  for(size_t i = 0; i < kOpNodesCount; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }

#if TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
tflite::micro::resetOfflineOpUserData( tflite::micro::TEST_MODEL_model::precomputed_op_user_data);
#endif  // TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
  size_t precomputed_sb_idx_ctr = 0;
  
  for(size_t i = 0; i < kOpNodesCount; ++i) {
    next_scratch_buffer_idx = precomputed_sb_idx_ctr;
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
    precomputed_sb_idx_ctr += node_scratch_buffer_requests[i];
  }
  return kTfLiteOk;
}

extern "C" TfLiteTensor* TEST_MODEL_input(int index) {  
    static const int inTensorIndices[] = {
    0, 
    };
    return &ctx.tensors[inTensorIndices[index]];
  }

extern "C" TfLiteTensor* TEST_MODEL_output(int index) {
    static const int outTensorIndices[] = {
    10, 
    };
    return &ctx.tensors[outTensorIndices[index]];
  }
  

// Returns the number of input tensors.
extern "C" size_t TEST_MODEL_inputs() {
  return 1;
}
// Returns the number of output tensors.
extern "C" size_t TEST_MODEL_outputs() {
  return 1;
}

extern "C" void *TEST_MODEL_input_ptr(int index) {
  return TEST_MODEL_input(index)->data.data;
}
extern "C" size_t TEST_MODEL_input_size(int index) {
  return TEST_MODEL_input(index)->bytes;
}
extern "C" int TEST_MODEL_input_dims_len(int index) {
  return TEST_MODEL_input(index)->dims->size;
}
extern "C" int *TEST_MODEL_input_dims(int index) {
  return &TEST_MODEL_input(index)->dims->data[0];
}

extern "C" void *TEST_MODEL_output_ptr(int index) {
  return TEST_MODEL_output(index)->data.data;
}
extern "C" size_t TEST_MODEL_output_size(int index) {
  return TEST_MODEL_output(index)->bytes;
}
extern "C" int TEST_MODEL_output_dims_len(int index) {
  return TEST_MODEL_output(index)->dims->size;
}
extern "C" int *TEST_MODEL_output_dims(int index) {
  return &TEST_MODEL_output(index)->dims->data[0];
}



extern "C" TfLiteStatus TEST_MODEL_invoke() {

#if TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA
tflite::micro::resetOfflineOpUserData( tflite::micro::TEST_MODEL_model::precomputed_op_user_data);
#endif  // TF_LITE_MICRO_USE_OFFLINE_OP_USER_DATA

  for(size_t i = 0; i < kOpNodesCount; ++i) {
#if LOG_OP_INPUTS
    tflite::logOpInvoke(&ctx,  &tflNodes[i]);
#endif
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

